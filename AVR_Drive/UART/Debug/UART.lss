
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003050  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003050  000030e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800068  00800068  000030ec  2**0
                  ALLOC
  3 .stab         00002b50  00000000  00000000  000030ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001240  00000000  00000000  00005c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000712c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ab70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000adfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b5cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__vector_4>
      14:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_5>
      18:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_10>
      2c:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 39       	cpi	r26, 0x90	; 144
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e5       	ldi	r30, 0x50	; 80
      78:	f0 e3       	ldi	r31, 0x30	; 48
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <main>
      8a:	0c 94 26 18 	jmp	0x304c	; 0x304c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_vImit>:
#include "UART_prv.h"
#include "UART_cfg.h"


void MUART_vImit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UCSRB = 0b00011000;
     b4e:	ea e2       	ldi	r30, 0x2A	; 42
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	80 83       	st	Z, r24
	UCSRC = 0b10000110;
     b56:	e0 e4       	ldi	r30, 0x40	; 64
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	86 e8       	ldi	r24, 0x86	; 134
     b5c:	80 83       	st	Z, r24
	UBRRL = 51 ;
     b5e:	e9 e2       	ldi	r30, 0x29	; 41
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	83 e3       	ldi	r24, 0x33	; 51
     b64:	80 83       	st	Z, r24

}
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <MUART_vTransmit>:
void MUART_vTransmit(u8 A_u18Byte)
{
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	0f 92       	push	r0
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	89 83       	std	Y+1, r24	; 0x01


	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
     b78:	eb e2       	ldi	r30, 0x2B	; 43
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	80 72       	andi	r24, 0x20	; 32
     b84:	90 70       	andi	r25, 0x00	; 0
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	b9 f3       	breq	.-18     	; 0xb78 <MUART_vTransmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR = A_u18Byte;
     b8a:	ec e2       	ldi	r30, 0x2C	; 44
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	80 83       	st	Z, r24

}
     b92:	0f 90       	pop	r0
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <MUART_vRecieve>:


u8 MUART_vRecieve(void)
{
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
     ba2:	eb e2       	ldi	r30, 0x2B	; 43
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	88 23       	and	r24, r24
     baa:	dc f7       	brge	.-10     	; 0xba2 <MUART_vRecieve+0x8>
	;
	/* Get and return received data from buffer */
	return UDR;
     bac:	ec e2       	ldi	r30, 0x2C	; 44
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z

}
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <MTIMERS_vInit>:

u32  G_u32IntervalCount;
u32  G_u32IntervalCount2;

void MTIMERS_vInit(void)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,COM01);
#else
#error "Please select a valid Timer Mode"
#endif
#elif TIMER0_MODE==TIMER_FASTPWM
	SET_BIT(TCCR0,WGM01);
     bc0:	a3 e5       	ldi	r26, 0x53	; 83
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e3 e5       	ldi	r30, 0x53	; 83
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	88 60       	ori	r24, 0x08	; 8
     bcc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM00);
     bce:	a3 e5       	ldi	r26, 0x53	; 83
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e3 e5       	ldi	r30, 0x53	; 83
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 64       	ori	r24, 0x40	; 64
     bda:	8c 93       	st	X, r24
#if TIMER0_OC0_MODE == OC_DISABLE
	CLR_BIT(TCCR0,COM00);
	CLR_BIT(TCCR0,COM01);
#elif	TIMER0_OC0_MODE==OC_CLEAR
	CLR_BIT(TCCR0,COM00);
     bdc:	a3 e5       	ldi	r26, 0x53	; 83
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e3 e5       	ldi	r30, 0x53	; 83
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 7e       	andi	r24, 0xEF	; 239
     be8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
     bea:	a3 e5       	ldi	r26, 0x53	; 83
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e3 e5       	ldi	r30, 0x53	; 83
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 62       	ori	r24, 0x20	; 32
     bf6:	8c 93       	st	X, r24
#error "Please select a valid Timer Mode"
#endif
#endif

#if u16TIMER1_ENABLE==ENABLE
	TCCR1A = 0b10000000;
     bf8:	ef e4       	ldi	r30, 0x4F	; 79
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 e8       	ldi	r24, 0x80	; 128
     bfe:	80 83       	st	Z, r24
	TCCR1B = 0b01000010;
     c00:	ee e4       	ldi	r30, 0x4E	; 78
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	82 e4       	ldi	r24, 0x42	; 66
     c06:	80 83       	st	Z, r24
	ICR1 = 625;
     c08:	e6 e4       	ldi	r30, 0x46	; 70
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	81 e7       	ldi	r24, 0x71	; 113
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	91 83       	std	Z+1, r25	; 0x01
     c12:	80 83       	st	Z, r24
#else
#error "Please select a valid Timer Mode"
#endif
#endif

}
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <MTIMERS_u16GetCapturedValue>:

u16  MTIMERS_u16GetCapturedValue(void)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     c22:	e6 e4       	ldi	r30, 0x46	; 70
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <MTIMERS_vSetIcuTrigger>:

void MTIMERS_vSetIcuTrigger(ICU_Trigger_t A_xIcuTrigger)
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	00 d0       	rcall	.+0      	; 0xc36 <MTIMERS_vSetIcuTrigger+0x6>
     c36:	0f 92       	push	r0
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	89 83       	std	Y+1, r24	; 0x01
	switch(A_xIcuTrigger)
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	3b 83       	std	Y+3, r19	; 0x03
     c46:	2a 83       	std	Y+2, r18	; 0x02
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	9b 81       	ldd	r25, Y+3	; 0x03
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	31 f0       	breq	.+12     	; 0xc5c <MTIMERS_vSetIcuTrigger+0x2c>
     c50:	2a 81       	ldd	r18, Y+2	; 0x02
     c52:	3b 81       	ldd	r19, Y+3	; 0x03
     c54:	21 30       	cpi	r18, 0x01	; 1
     c56:	31 05       	cpc	r19, r1
     c58:	49 f0       	breq	.+18     	; 0xc6c <MTIMERS_vSetIcuTrigger+0x3c>
     c5a:	0f c0       	rjmp	.+30     	; 0xc7a <MTIMERS_vSetIcuTrigger+0x4a>
	{
	case ICU_Falling:
		CLR_BIT(TCCR1B,6);
     c5c:	ae e4       	ldi	r26, 0x4E	; 78
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	ee e4       	ldi	r30, 0x4E	; 78
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	8f 7b       	andi	r24, 0xBF	; 191
     c68:	8c 93       	st	X, r24
     c6a:	07 c0       	rjmp	.+14     	; 0xc7a <MTIMERS_vSetIcuTrigger+0x4a>
		break;
	case ICU_Rising:
		SET_BIT(TCCR1B,6);
     c6c:	ae e4       	ldi	r26, 0x4E	; 78
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	ee e4       	ldi	r30, 0x4E	; 78
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	80 64       	ori	r24, 0x40	; 64
     c78:	8c 93       	st	X, r24
		break;
	}

}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <MTimers_vIsrFeatuer>:


void MTimers_vIsrFeatuer(u8 A_u8TimerId, u8 A_u8InterruptType)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	2a 97       	sbiw	r28, 0x0a	; 10
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerId)
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	3a 87       	std	Y+10, r19	; 0x0a
     ca6:	29 87       	std	Y+9, r18	; 0x09
     ca8:	89 85       	ldd	r24, Y+9	; 0x09
     caa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	91 05       	cpc	r25, r1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <MTimers_vIsrFeatuer+0x2e>
     cb2:	4c c0       	rjmp	.+152    	; 0xd4c <MTimers_vIsrFeatuer+0xc6>
     cb4:	29 85       	ldd	r18, Y+9	; 0x09
     cb6:	3a 85       	ldd	r19, Y+10	; 0x0a
     cb8:	22 30       	cpi	r18, 0x02	; 2
     cba:	31 05       	cpc	r19, r1
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <MTimers_vIsrFeatuer+0x3a>
     cbe:	db c0       	rjmp	.+438    	; 0xe76 <MTimers_vIsrFeatuer+0x1f0>
     cc0:	89 85       	ldd	r24, Y+9	; 0x09
     cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	09 f0       	breq	.+2      	; 0xcca <MTimers_vIsrFeatuer+0x44>
     cc8:	15 c1       	rjmp	.+554    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
	{
	case TIMER0 :
		switch(A_u8InterruptType)
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	38 87       	std	Y+8, r19	; 0x08
     cd2:	2f 83       	std	Y+7, r18	; 0x07
     cd4:	8f 81       	ldd	r24, Y+7	; 0x07
     cd6:	98 85       	ldd	r25, Y+8	; 0x08
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	c9 f0       	breq	.+50     	; 0xd10 <MTimers_vIsrFeatuer+0x8a>
     cde:	2f 81       	ldd	r18, Y+7	; 0x07
     ce0:	38 85       	ldd	r19, Y+8	; 0x08
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	19 f1       	breq	.+70     	; 0xd2e <MTimers_vIsrFeatuer+0xa8>
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	09 f0       	breq	.+2      	; 0xcf2 <MTimers_vIsrFeatuer+0x6c>
     cf0:	01 c1       	rjmp	.+514    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
		{
		case ISR_DISABLE:
			CLR_BIT(TIMSK,TOIE0);
     cf2:	a9 e5       	ldi	r26, 0x59	; 89
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e9 e5       	ldi	r30, 0x59	; 89
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8e 7f       	andi	r24, 0xFE	; 254
     cfe:	8c 93       	st	X, r24
			CLR_BIT(TIMSK,OCIE0);
     d00:	a9 e5       	ldi	r26, 0x59	; 89
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e9 e5       	ldi	r30, 0x59	; 89
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8d 7f       	andi	r24, 0xFD	; 253
     d0c:	8c 93       	st	X, r24
     d0e:	f2 c0       	rjmp	.+484    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
			break;
		case ISR_OVF :
			SET_BIT(TIMSK,TOIE0);
     d10:	a9 e5       	ldi	r26, 0x59	; 89
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e9 e5       	ldi	r30, 0x59	; 89
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	81 60       	ori	r24, 0x01	; 1
     d1c:	8c 93       	st	X, r24
			CLR_BIT(TIMSK,OCIE0);
     d1e:	a9 e5       	ldi	r26, 0x59	; 89
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e9 e5       	ldi	r30, 0x59	; 89
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8d 7f       	andi	r24, 0xFD	; 253
     d2a:	8c 93       	st	X, r24
     d2c:	e3 c0       	rjmp	.+454    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
			break;
		case ISR_CTC:
			CLR_BIT(TIMSK,TOIE0);
     d2e:	a9 e5       	ldi	r26, 0x59	; 89
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e9 e5       	ldi	r30, 0x59	; 89
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8e 7f       	andi	r24, 0xFE	; 254
     d3a:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
     d3c:	a9 e5       	ldi	r26, 0x59	; 89
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e9 e5       	ldi	r30, 0x59	; 89
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	8c 93       	st	X, r24
     d4a:	d4 c0       	rjmp	.+424    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
			break;
		}
		break;
		case u16TIMER1 :
			switch(A_u8InterruptType)
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	3e 83       	std	Y+6, r19	; 0x06
     d54:	2d 83       	std	Y+5, r18	; 0x05
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	91 05       	cpc	r25, r1
     d5e:	a1 f1       	breq	.+104    	; 0xdc8 <MTimers_vIsrFeatuer+0x142>
     d60:	2d 81       	ldd	r18, Y+5	; 0x05
     d62:	3e 81       	ldd	r19, Y+6	; 0x06
     d64:	22 30       	cpi	r18, 0x02	; 2
     d66:	31 05       	cpc	r19, r1
     d68:	2c f4       	brge	.+10     	; 0xd74 <MTimers_vIsrFeatuer+0xee>
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	71 f0       	breq	.+28     	; 0xd8e <MTimers_vIsrFeatuer+0x108>
     d72:	c0 c0       	rjmp	.+384    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
     d74:	2d 81       	ldd	r18, Y+5	; 0x05
     d76:	3e 81       	ldd	r19, Y+6	; 0x06
     d78:	22 30       	cpi	r18, 0x02	; 2
     d7a:	31 05       	cpc	r19, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <MTimers_vIsrFeatuer+0xfa>
     d7e:	41 c0       	rjmp	.+130    	; 0xe02 <MTimers_vIsrFeatuer+0x17c>
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	83 30       	cpi	r24, 0x03	; 3
     d86:	91 05       	cpc	r25, r1
     d88:	09 f4       	brne	.+2      	; 0xd8c <MTimers_vIsrFeatuer+0x106>
     d8a:	58 c0       	rjmp	.+176    	; 0xe3c <MTimers_vIsrFeatuer+0x1b6>
     d8c:	b3 c0       	rjmp	.+358    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
			{
			case ISR_DISABLE:
				CLR_BIT(TIMSK,TICIE1);
     d8e:	a9 e5       	ldi	r26, 0x59	; 89
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e9 e5       	ldi	r30, 0x59	; 89
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7d       	andi	r24, 0xDF	; 223
     d9a:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,OCIE1A);
     d9c:	a9 e5       	ldi	r26, 0x59	; 89
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e9 e5       	ldi	r30, 0x59	; 89
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 7e       	andi	r24, 0xEF	; 239
     da8:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,OCIE1B);
     daa:	a9 e5       	ldi	r26, 0x59	; 89
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e9 e5       	ldi	r30, 0x59	; 89
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	87 7f       	andi	r24, 0xF7	; 247
     db6:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,TOIE1);
     db8:	a9 e5       	ldi	r26, 0x59	; 89
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e9 e5       	ldi	r30, 0x59	; 89
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8b 7f       	andi	r24, 0xFB	; 251
     dc4:	8c 93       	st	X, r24
     dc6:	96 c0       	rjmp	.+300    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
				break;
			case ISR_OVF :
				CLR_BIT(TIMSK,TICIE1);
     dc8:	a9 e5       	ldi	r26, 0x59	; 89
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e9 e5       	ldi	r30, 0x59	; 89
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 7d       	andi	r24, 0xDF	; 223
     dd4:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,OCIE1A);
     dd6:	a9 e5       	ldi	r26, 0x59	; 89
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e9 e5       	ldi	r30, 0x59	; 89
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 7e       	andi	r24, 0xEF	; 239
     de2:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,OCIE1B);
     de4:	a9 e5       	ldi	r26, 0x59	; 89
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e9 e5       	ldi	r30, 0x59	; 89
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	87 7f       	andi	r24, 0xF7	; 247
     df0:	8c 93       	st	X, r24
				SET_BIT(TIMSK,TOIE1);
     df2:	a9 e5       	ldi	r26, 0x59	; 89
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e9 e5       	ldi	r30, 0x59	; 89
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	79 c0       	rjmp	.+242    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
				break;
			case ISR_CTC:
				CLR_BIT(TIMSK,TICIE1);
     e02:	a9 e5       	ldi	r26, 0x59	; 89
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e9 e5       	ldi	r30, 0x59	; 89
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8f 7d       	andi	r24, 0xDF	; 223
     e0e:	8c 93       	st	X, r24
				SET_BIT(TIMSK,OCIE1A);
     e10:	a9 e5       	ldi	r26, 0x59	; 89
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e9 e5       	ldi	r30, 0x59	; 89
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 61       	ori	r24, 0x10	; 16
     e1c:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,OCIE1B);
     e1e:	a9 e5       	ldi	r26, 0x59	; 89
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e9 e5       	ldi	r30, 0x59	; 89
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	87 7f       	andi	r24, 0xF7	; 247
     e2a:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,TOIE1);
     e2c:	a9 e5       	ldi	r26, 0x59	; 89
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e9 e5       	ldi	r30, 0x59	; 89
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8b 7f       	andi	r24, 0xFB	; 251
     e38:	8c 93       	st	X, r24
     e3a:	5c c0       	rjmp	.+184    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
				break;
			case ISR_ICU :
				SET_BIT(TIMSK,TICIE1);
     e3c:	a9 e5       	ldi	r26, 0x59	; 89
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e9 e5       	ldi	r30, 0x59	; 89
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	80 62       	ori	r24, 0x20	; 32
     e48:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,OCIE1A);
     e4a:	a9 e5       	ldi	r26, 0x59	; 89
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e9 e5       	ldi	r30, 0x59	; 89
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8f 7e       	andi	r24, 0xEF	; 239
     e56:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,OCIE1B);
     e58:	a9 e5       	ldi	r26, 0x59	; 89
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e9 e5       	ldi	r30, 0x59	; 89
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	87 7f       	andi	r24, 0xF7	; 247
     e64:	8c 93       	st	X, r24
				CLR_BIT(TIMSK,TOIE1);
     e66:	a9 e5       	ldi	r26, 0x59	; 89
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e9 e5       	ldi	r30, 0x59	; 89
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8b 7f       	andi	r24, 0xFB	; 251
     e72:	8c 93       	st	X, r24
     e74:	3f c0       	rjmp	.+126    	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
				break;
			}
			break;
			case TIMER2 :
				switch(A_u8InterruptType)
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3c 83       	std	Y+4, r19	; 0x04
     e7e:	2b 83       	std	Y+3, r18	; 0x03
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	91 05       	cpc	r25, r1
     e88:	c1 f0       	breq	.+48     	; 0xeba <MTimers_vIsrFeatuer+0x234>
     e8a:	2b 81       	ldd	r18, Y+3	; 0x03
     e8c:	3c 81       	ldd	r19, Y+4	; 0x04
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	11 f1       	breq	.+68     	; 0xed8 <MTimers_vIsrFeatuer+0x252>
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	61 f5       	brne	.+88     	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
				{
				case ISR_DISABLE:
					CLR_BIT(TIMSK,TOIE2);
     e9c:	a9 e5       	ldi	r26, 0x59	; 89
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e9 e5       	ldi	r30, 0x59	; 89
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 7b       	andi	r24, 0xBF	; 191
     ea8:	8c 93       	st	X, r24
					CLR_BIT(TIMSK,OCIE2);
     eaa:	a9 e5       	ldi	r26, 0x59	; 89
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e9 e5       	ldi	r30, 0x59	; 89
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 77       	andi	r24, 0x7F	; 127
     eb6:	8c 93       	st	X, r24
     eb8:	1d c0       	rjmp	.+58     	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
					break;
				case ISR_OVF :
					SET_BIT(TIMSK,TOIE2);
     eba:	a9 e5       	ldi	r26, 0x59	; 89
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e9 e5       	ldi	r30, 0x59	; 89
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	8c 93       	st	X, r24
					CLR_BIT(TIMSK,OCIE2);
     ec8:	a9 e5       	ldi	r26, 0x59	; 89
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e9 e5       	ldi	r30, 0x59	; 89
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8f 77       	andi	r24, 0x7F	; 127
     ed4:	8c 93       	st	X, r24
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <MTimers_vIsrFeatuer+0x26e>
					break;
				case ISR_CTC:
					CLR_BIT(TIMSK,TOIE2);
     ed8:	a9 e5       	ldi	r26, 0x59	; 89
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e9 e5       	ldi	r30, 0x59	; 89
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8f 7b       	andi	r24, 0xBF	; 191
     ee4:	8c 93       	st	X, r24
					SET_BIT(TIMSK,OCIE2);
     ee6:	a9 e5       	ldi	r26, 0x59	; 89
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e9 e5       	ldi	r30, 0x59	; 89
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 68       	ori	r24, 0x80	; 128
     ef2:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
     ef4:	2a 96       	adiw	r28, 0x0a	; 10
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <MTIMERS_vSetCallback>:


void MTIMERS_vSetCallback( u8 A_u8TimerId,u8 A_u8TimerMode,void (*A_xFptr)(void))
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <MTIMERS_vSetCallback+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <MTIMERS_vSetCallback+0x8>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <MTIMERS_vSetCallback+0xa>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	6a 83       	std	Y+2, r22	; 0x02
     f18:	5c 83       	std	Y+4, r21	; 0x04
     f1a:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8TimerId)
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	3e 83       	std	Y+6, r19	; 0x06
     f24:	2d 83       	std	Y+5, r18	; 0x05
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	f1 f0       	breq	.+60     	; 0xf6c <MTIMERS_vSetCallback+0x66>
     f30:	2d 81       	ldd	r18, Y+5	; 0x05
     f32:	3e 81       	ldd	r19, Y+6	; 0x06
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <MTIMERS_vSetCallback+0xa2>
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	09 f0       	breq	.+2      	; 0xf44 <MTIMERS_vSetCallback+0x3e>
     f42:	45 c0       	rjmp	.+138    	; 0xfce <MTIMERS_vSetCallback+0xc8>
	{
	case TIMER0 :
		if(A_u8TimerMode==TIM_mode_OVF)
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	88 23       	and	r24, r24
     f48:	39 f4       	brne	.+14     	; 0xf58 <MTIMERS_vSetCallback+0x52>
		{
			G_TIM0_OVF_Callback=A_xFptr;
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	90 93 79 00 	sts	0x0079, r25
     f52:	80 93 78 00 	sts	0x0078, r24
     f56:	3b c0       	rjmp	.+118    	; 0xfce <MTIMERS_vSetCallback+0xc8>
		}
		else if(A_u8TimerMode==TIM_mode_CTC)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	c1 f5       	brne	.+112    	; 0xfce <MTIMERS_vSetCallback+0xc8>
		{
			G_TIM0_CTC_Callback=A_xFptr;
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	90 93 7b 00 	sts	0x007B, r25
     f66:	80 93 7a 00 	sts	0x007A, r24
     f6a:	31 c0       	rjmp	.+98     	; 0xfce <MTIMERS_vSetCallback+0xc8>
		}
		else
		{/*do do eny sing*/}
		break;
	case u16TIMER1:
		if(A_u8TimerMode==TIM_mode_OVF)
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	88 23       	and	r24, r24
     f70:	39 f4       	brne	.+14     	; 0xf80 <MTIMERS_vSetCallback+0x7a>
		{
			G_TIMu16_OVF_Callback=A_xFptr;
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	90 93 81 00 	sts	0x0081, r25
     f7a:	80 93 80 00 	sts	0x0080, r24
     f7e:	27 c0       	rjmp	.+78     	; 0xfce <MTIMERS_vSetCallback+0xc8>
		}
		else if(A_u8TimerMode==TIM_mode_CTC)
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	39 f4       	brne	.+14     	; 0xf94 <MTIMERS_vSetCallback+0x8e>
		{
			G_TIMu16_CTC_Callback=A_xFptr;
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	90 93 83 00 	sts	0x0083, r25
     f8e:	80 93 82 00 	sts	0x0082, r24
     f92:	1d c0       	rjmp	.+58     	; 0xfce <MTIMERS_vSetCallback+0xc8>
		}
		else if(A_u8TimerMode==TIM_mode_ICU)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	d1 f4       	brne	.+52     	; 0xfce <MTIMERS_vSetCallback+0xc8>
		{
			G_TIMu16_ICU_Callback=A_xFptr;
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	90 93 85 00 	sts	0x0085, r25
     fa2:	80 93 84 00 	sts	0x0084, r24
     fa6:	13 c0       	rjmp	.+38     	; 0xfce <MTIMERS_vSetCallback+0xc8>
		{
			/*no thing*/
		}
		break;
	case TIMER2:
		if(A_u8TimerMode==TIM_mode_OVF)
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	88 23       	and	r24, r24
     fac:	39 f4       	brne	.+14     	; 0xfbc <MTIMERS_vSetCallback+0xb6>
		{
			G_TIM2_OVF_Callback=A_xFptr;
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	90 93 7d 00 	sts	0x007D, r25
     fb6:	80 93 7c 00 	sts	0x007C, r24
     fba:	09 c0       	rjmp	.+18     	; 0xfce <MTIMERS_vSetCallback+0xc8>
		}
		else if(A_u8TimerMode==TIM_mode_CTC)
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	31 f4       	brne	.+12     	; 0xfce <MTIMERS_vSetCallback+0xc8>
		{
			G_TIM2_CTC_Callback=A_xFptr;
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	90 93 7f 00 	sts	0x007F, r25
     fca:	80 93 7e 00 	sts	0x007E, r24
		else
		{/*do do eny sing*/}
		break;
	}

}
     fce:	26 96       	adiw	r28, 0x06	; 6
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <MTIMERS_vSetPreloadValue>:



void MTIMERS_vSetPreloadValue(u8 A_u8TimerId , u16 A_u16Preload)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <MTIMERS_vSetPreloadValue+0x6>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <MTIMERS_vSetPreloadValue+0x8>
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	7b 83       	std	Y+3, r23	; 0x03
     ff2:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerId)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3d 83       	std	Y+5, r19	; 0x05
     ffc:	2c 83       	std	Y+4, r18	; 0x04
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	9d 81       	ldd	r25, Y+5	; 0x05
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	71 f0       	breq	.+28     	; 0x1024 <MTIMERS_vSetPreloadValue+0x44>
    1008:	2c 81       	ldd	r18, Y+4	; 0x04
    100a:	3d 81       	ldd	r19, Y+5	; 0x05
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	81 f0       	breq	.+32     	; 0x1032 <MTIMERS_vSetPreloadValue+0x52>
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	81 f4       	brne	.+32     	; 0x103a <MTIMERS_vSetPreloadValue+0x5a>
	{
	case TIMER0:
		TCNT0 = A_u16Preload ;
    101a:	e2 e5       	ldi	r30, 0x52	; 82
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	80 83       	st	Z, r24
    1022:	0b c0       	rjmp	.+22     	; 0x103a <MTIMERS_vSetPreloadValue+0x5a>
		break;
	case u16TIMER1:
		TCNT1 = A_u16Preload ;
    1024:	ec e4       	ldi	r30, 0x4C	; 76
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	80 83       	st	Z, r24
    1030:	04 c0       	rjmp	.+8      	; 0x103a <MTIMERS_vSetPreloadValue+0x5a>
		break;
	case TIMER2:
		TCNT2 = A_u16Preload ;
    1032:	e4 e4       	ldi	r30, 0x44	; 68
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	80 83       	st	Z, r24
		break;
	}

}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <MTIMERS_vSetCompareValue>:

void MTIMERS_vSetCompareValue(u8 A_u8TimerId ,u16 A_u16CompareValue)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <MTIMERS_vSetCompareValue+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <MTIMERS_vSetCompareValue+0x8>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	7b 83       	std	Y+3, r23	; 0x03
    105c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerId)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3d 83       	std	Y+5, r19	; 0x05
    1066:	2c 83       	std	Y+4, r18	; 0x04
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	71 f0       	breq	.+28     	; 0x108e <MTIMERS_vSetCompareValue+0x44>
    1072:	2c 81       	ldd	r18, Y+4	; 0x04
    1074:	3d 81       	ldd	r19, Y+5	; 0x05
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	81 f0       	breq	.+32     	; 0x109c <MTIMERS_vSetCompareValue+0x52>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	81 f4       	brne	.+32     	; 0x10a4 <MTIMERS_vSetCompareValue+0x5a>
	{
	case TIMER0:
		OCR0 = A_u16CompareValue ;
    1084:	ec e5       	ldi	r30, 0x5C	; 92
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	80 83       	st	Z, r24
    108c:	0b c0       	rjmp	.+22     	; 0x10a4 <MTIMERS_vSetCompareValue+0x5a>
		break;
	case u16TIMER1:
		OCR1A = A_u16CompareValue ;
    108e:	ea e4       	ldi	r30, 0x4A	; 74
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	9b 81       	ldd	r25, Y+3	; 0x03
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <MTIMERS_vSetCompareValue+0x5a>
		break;
	case TIMER2:
		OCR2 = A_u16CompareValue ;
    109c:	e3 e4       	ldi	r30, 0x43	; 67
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	80 83       	st	Z, r24
		break;
	}
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <MTIMERS_vSetInterval_Asynch>:

void MTIMERS_vSetInterval_Asynch(u8 A_u8TimerId,u16 A_u16IntervalCounts, void (*A_fptr)(void))
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	27 97       	sbiw	r28, 0x07	; 7
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	7b 83       	std	Y+3, r23	; 0x03
    10cc:	6a 83       	std	Y+2, r22	; 0x02
    10ce:	5d 83       	std	Y+5, r21	; 0x05
    10d0:	4c 83       	std	Y+4, r20	; 0x04
	switch(A_u8TimerId)
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3f 83       	std	Y+7, r19	; 0x07
    10da:	2e 83       	std	Y+6, r18	; 0x06
    10dc:	8e 81       	ldd	r24, Y+6	; 0x06
    10de:	9f 81       	ldd	r25, Y+7	; 0x07
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	09 f1       	breq	.+66     	; 0x1128 <MTIMERS_vSetInterval_Asynch+0x74>
    10e6:	2e 81       	ldd	r18, Y+6	; 0x06
    10e8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	99 f1       	breq	.+102    	; 0x1156 <MTIMERS_vSetInterval_Asynch+0xa2>
    10f0:	8e 81       	ldd	r24, Y+6	; 0x06
    10f2:	9f 81       	ldd	r25, Y+7	; 0x07
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	09 f0       	breq	.+2      	; 0x10fa <MTIMERS_vSetInterval_Asynch+0x46>
    10f8:	44 c0       	rjmp	.+136    	; 0x1182 <MTIMERS_vSetInterval_Asynch+0xce>
	{
	case TIMER0:
		G_u32IntervalCount = A_u16IntervalCounts ;
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	9b 81       	ldd	r25, Y+3	; 0x03
    10fe:	cc 01       	movw	r24, r24
    1100:	a0 e0       	ldi	r26, 0x00	; 0
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	80 93 8a 00 	sts	0x008A, r24
    1108:	90 93 8b 00 	sts	0x008B, r25
    110c:	a0 93 8c 00 	sts	0x008C, r26
    1110:	b0 93 8d 00 	sts	0x008D, r27
		G_TIM0_OVF_Callback = A_fptr ;
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	90 93 79 00 	sts	0x0079, r25
    111c:	80 93 78 00 	sts	0x0078, r24
		MTIMERS_vStartTimer(A_u8TimerId);
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	0e 94 8c 09 	call	0x1318	; 0x1318 <MTIMERS_vStartTimer>
    1126:	2d c0       	rjmp	.+90     	; 0x1182 <MTIMERS_vSetInterval_Asynch+0xce>
		break;
	case u16TIMER1:
		G_u32IntervalCount = A_u16IntervalCounts ;
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	9b 81       	ldd	r25, Y+3	; 0x03
    112c:	cc 01       	movw	r24, r24
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	80 93 8a 00 	sts	0x008A, r24
    1136:	90 93 8b 00 	sts	0x008B, r25
    113a:	a0 93 8c 00 	sts	0x008C, r26
    113e:	b0 93 8d 00 	sts	0x008D, r27
		G_TIMu16_OVF_Callback = A_fptr ;
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	90 93 81 00 	sts	0x0081, r25
    114a:	80 93 80 00 	sts	0x0080, r24
		MTIMERS_vStartTimer(A_u8TimerId);
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	0e 94 8c 09 	call	0x1318	; 0x1318 <MTIMERS_vStartTimer>
    1154:	16 c0       	rjmp	.+44     	; 0x1182 <MTIMERS_vSetInterval_Asynch+0xce>
		break;
	case TIMER2:
		G_u32IntervalCount2 = A_u16IntervalCounts ;
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	9b 81       	ldd	r25, Y+3	; 0x03
    115a:	cc 01       	movw	r24, r24
    115c:	a0 e0       	ldi	r26, 0x00	; 0
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	80 93 86 00 	sts	0x0086, r24
    1164:	90 93 87 00 	sts	0x0087, r25
    1168:	a0 93 88 00 	sts	0x0088, r26
    116c:	b0 93 89 00 	sts	0x0089, r27
		G_TIM2_OVF_Callback = A_fptr ;
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	90 93 7d 00 	sts	0x007D, r25
    1178:	80 93 7c 00 	sts	0x007C, r24
		MTIMERS_vStartTimer(A_u8TimerId);
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	0e 94 8c 09 	call	0x1318	; 0x1318 <MTIMERS_vStartTimer>
		break;

	}
}
    1182:	27 96       	adiw	r28, 0x07	; 7
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <MTIMERS_vSetInterval_CTC_Asynch>:

void MTIMERS_vSetInterval_CTC_Asynch(u8 A_u8TimerId,u16 A_u16IntervalCounts,
		u16 A_u16CompareValue,
		void (*A_fptr)(void))
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	29 97       	sbiw	r28, 0x09	; 9
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	7b 83       	std	Y+3, r23	; 0x03
    11ac:	6a 83       	std	Y+2, r22	; 0x02
    11ae:	5d 83       	std	Y+5, r21	; 0x05
    11b0:	4c 83       	std	Y+4, r20	; 0x04
    11b2:	3f 83       	std	Y+7, r19	; 0x07
    11b4:	2e 83       	std	Y+6, r18	; 0x06
	switch(A_u8TimerId)
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	39 87       	std	Y+9, r19	; 0x09
    11be:	28 87       	std	Y+8, r18	; 0x08
    11c0:	88 85       	ldd	r24, Y+8	; 0x08
    11c2:	99 85       	ldd	r25, Y+9	; 0x09
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	41 f1       	breq	.+80     	; 0x121a <MTIMERS_vSetInterval_CTC_Asynch+0x86>
    11ca:	28 85       	ldd	r18, Y+8	; 0x08
    11cc:	39 85       	ldd	r19, Y+9	; 0x09
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <MTIMERS_vSetInterval_CTC_Asynch+0x42>
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <MTIMERS_vSetInterval_CTC_Asynch+0xc0>
    11d6:	88 85       	ldd	r24, Y+8	; 0x08
    11d8:	99 85       	ldd	r25, Y+9	; 0x09
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <MTIMERS_vSetInterval_CTC_Asynch+0x4c>
    11de:	56 c0       	rjmp	.+172    	; 0x128c <MTIMERS_vSetInterval_CTC_Asynch+0xf8>
	{
	case TIMER0 :
		G_u32IntervalCount = A_u16IntervalCounts ;
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	9b 81       	ldd	r25, Y+3	; 0x03
    11e4:	cc 01       	movw	r24, r24
    11e6:	a0 e0       	ldi	r26, 0x00	; 0
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	80 93 8a 00 	sts	0x008A, r24
    11ee:	90 93 8b 00 	sts	0x008B, r25
    11f2:	a0 93 8c 00 	sts	0x008C, r26
    11f6:	b0 93 8d 00 	sts	0x008D, r27
		G_TIM0_CTC_Callback = A_fptr ;
    11fa:	8e 81       	ldd	r24, Y+6	; 0x06
    11fc:	9f 81       	ldd	r25, Y+7	; 0x07
    11fe:	90 93 7b 00 	sts	0x007B, r25
    1202:	80 93 7a 00 	sts	0x007A, r24
		MTIMERS_vSetCompareValue(A_u8TimerId,A_u16CompareValue);
    1206:	2c 81       	ldd	r18, Y+4	; 0x04
    1208:	3d 81       	ldd	r19, Y+5	; 0x05
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	b9 01       	movw	r22, r18
    120e:	0e 94 25 08 	call	0x104a	; 0x104a <MTIMERS_vSetCompareValue>
		MTIMERS_vStartTimer(A_u8TimerId);
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	0e 94 8c 09 	call	0x1318	; 0x1318 <MTIMERS_vStartTimer>
    1218:	39 c0       	rjmp	.+114    	; 0x128c <MTIMERS_vSetInterval_CTC_Asynch+0xf8>
		break;
	case u16TIMER1 :
		G_u32IntervalCount = A_u16IntervalCounts ;
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	9b 81       	ldd	r25, Y+3	; 0x03
    121e:	cc 01       	movw	r24, r24
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	80 93 8a 00 	sts	0x008A, r24
    1228:	90 93 8b 00 	sts	0x008B, r25
    122c:	a0 93 8c 00 	sts	0x008C, r26
    1230:	b0 93 8d 00 	sts	0x008D, r27
		G_TIMu16_CTC_Callback = A_fptr ;
    1234:	8e 81       	ldd	r24, Y+6	; 0x06
    1236:	9f 81       	ldd	r25, Y+7	; 0x07
    1238:	90 93 83 00 	sts	0x0083, r25
    123c:	80 93 82 00 	sts	0x0082, r24
		MTIMERS_vSetCompareValue(A_u8TimerId,A_u16CompareValue);
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	b9 01       	movw	r22, r18
    1248:	0e 94 25 08 	call	0x104a	; 0x104a <MTIMERS_vSetCompareValue>
		MTIMERS_vStartTimer(A_u8TimerId);
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	0e 94 8c 09 	call	0x1318	; 0x1318 <MTIMERS_vStartTimer>
    1252:	1c c0       	rjmp	.+56     	; 0x128c <MTIMERS_vSetInterval_CTC_Asynch+0xf8>
		break;
	case TIMER2 :
		G_u32IntervalCount2 = A_u16IntervalCounts ;
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	9b 81       	ldd	r25, Y+3	; 0x03
    1258:	cc 01       	movw	r24, r24
    125a:	a0 e0       	ldi	r26, 0x00	; 0
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	80 93 86 00 	sts	0x0086, r24
    1262:	90 93 87 00 	sts	0x0087, r25
    1266:	a0 93 88 00 	sts	0x0088, r26
    126a:	b0 93 89 00 	sts	0x0089, r27
		G_TIM2_CTC_Callback = A_fptr ;
    126e:	8e 81       	ldd	r24, Y+6	; 0x06
    1270:	9f 81       	ldd	r25, Y+7	; 0x07
    1272:	90 93 7f 00 	sts	0x007F, r25
    1276:	80 93 7e 00 	sts	0x007E, r24
		MTIMERS_vSetCompareValue(A_u8TimerId,A_u16CompareValue);
    127a:	2c 81       	ldd	r18, Y+4	; 0x04
    127c:	3d 81       	ldd	r19, Y+5	; 0x05
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	b9 01       	movw	r22, r18
    1282:	0e 94 25 08 	call	0x104a	; 0x104a <MTIMERS_vSetCompareValue>
		MTIMERS_vStartTimer(A_u8TimerId);
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	0e 94 8c 09 	call	0x1318	; 0x1318 <MTIMERS_vStartTimer>
		break;
	}
}
    128c:	29 96       	adiw	r28, 0x09	; 9
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <MTIMERS_u16GetElapsedTime>:

u16  MTIMERS_u16GetElapsedTime(u8 A_u8TimerId)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <MTIMERS_u16GetElapsedTime+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <MTIMERS_u16GetElapsedTime+0x8>
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	8b 83       	std	Y+3, r24	; 0x03
	u16 L_u16TimeValue=0;
    12ae:	1a 82       	std	Y+2, r1	; 0x02
    12b0:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8TimerId)
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3d 83       	std	Y+5, r19	; 0x05
    12ba:	2c 83       	std	Y+4, r18	; 0x04
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	9d 81       	ldd	r25, Y+5	; 0x05
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	89 f0       	breq	.+34     	; 0x12e8 <MTIMERS_u16GetElapsedTime+0x4a>
    12c6:	2c 81       	ldd	r18, Y+4	; 0x04
    12c8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	99 f0       	breq	.+38     	; 0x12f6 <MTIMERS_u16GetElapsedTime+0x58>
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	b1 f4       	brne	.+44     	; 0x1304 <MTIMERS_u16GetElapsedTime+0x66>
	{
	case TIMER0 :
		L_u16TimeValue = TCNT0;
    12d8:	e2 e5       	ldi	r30, 0x52	; 82
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <MTIMERS_u16GetElapsedTime+0x66>
		break;
	case u16TIMER1 :
		L_u16TimeValue = TCNT1;
    12e8:	ec e4       	ldi	r30, 0x4C	; 76
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	07 c0       	rjmp	.+14     	; 0x1304 <MTIMERS_u16GetElapsedTime+0x66>
		break;
	case TIMER2 :
		L_u16TimeValue = TCNT2;
    12f6:	e4 e4       	ldi	r30, 0x44	; 68
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return L_u16TimeValue;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <MTIMERS_vStartTimer>:

void MTIMERS_vStartTimer(u8 A_u8TimerId)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <MTIMERS_vStartTimer+0x6>
    131e:	0f 92       	push	r0
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8TimerId)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3b 83       	std	Y+3, r19	; 0x03
    132e:	2a 83       	std	Y+2, r18	; 0x02
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	9b 81       	ldd	r25, Y+3	; 0x03
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	91 f0       	breq	.+36     	; 0x135e <MTIMERS_vStartTimer+0x46>
    133a:	2a 81       	ldd	r18, Y+2	; 0x02
    133c:	3b 81       	ldd	r19, Y+3	; 0x03
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	b1 f0       	breq	.+44     	; 0x1370 <MTIMERS_vStartTimer+0x58>
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	9b 81       	ldd	r25, Y+3	; 0x03
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	d1 f4       	brne	.+52     	; 0x1380 <MTIMERS_vStartTimer+0x68>
	{
	case TIMER0 :
		TCCR0 = (TCCR0 & 0xF8) | (TIMER_PRESCALER) ;
    134c:	a3 e5       	ldi	r26, 0x53	; 83
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e3 e5       	ldi	r30, 0x53	; 83
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	88 7f       	andi	r24, 0xF8	; 248
    1358:	82 60       	ori	r24, 0x02	; 2
    135a:	8c 93       	st	X, r24
    135c:	11 c0       	rjmp	.+34     	; 0x1380 <MTIMERS_vStartTimer+0x68>
		break;
	case u16TIMER1 :
		TCCR1B = (TCCR1B & 0xF8) | (TIMER_PRESCALER) ;
    135e:	ae e4       	ldi	r26, 0x4E	; 78
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ee e4       	ldi	r30, 0x4E	; 78
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	88 7f       	andi	r24, 0xF8	; 248
    136a:	82 60       	ori	r24, 0x02	; 2
    136c:	8c 93       	st	X, r24
    136e:	08 c0       	rjmp	.+16     	; 0x1380 <MTIMERS_vStartTimer+0x68>
		break;
	case TIMER2 :
		TCCR2 = (TCCR2 & 0xF8) | (TIMER_PRESCALER) ;
    1370:	a5 e4       	ldi	r26, 0x45	; 69
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e5 e4       	ldi	r30, 0x45	; 69
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 7f       	andi	r24, 0xF8	; 248
    137c:	82 60       	ori	r24, 0x02	; 2
    137e:	8c 93       	st	X, r24
		break;
	}
}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <MTIMERS_vStopTimer>:

void MTIMERS_vStopTimer(u8 A_u8TimerId)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <MTIMERS_vStopTimer+0x6>
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8TimerId)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3b 83       	std	Y+3, r19	; 0x03
    13a2:	2a 83       	std	Y+2, r18	; 0x02
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	9b 81       	ldd	r25, Y+3	; 0x03
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	89 f0       	breq	.+34     	; 0x13d0 <MTIMERS_vStopTimer+0x44>
    13ae:	2a 81       	ldd	r18, Y+2	; 0x02
    13b0:	3b 81       	ldd	r19, Y+3	; 0x03
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	a1 f0       	breq	.+40     	; 0x13e0 <MTIMERS_vStopTimer+0x54>
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	9b 81       	ldd	r25, Y+3	; 0x03
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	b9 f4       	brne	.+46     	; 0x13ee <MTIMERS_vStopTimer+0x62>
	{
	case TIMER0 :
		TCCR0 = (TCCR0 & 0xF8) | (TIMER_DISABLE);
    13c0:	a3 e5       	ldi	r26, 0x53	; 83
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e3 e5       	ldi	r30, 0x53	; 83
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	88 7f       	andi	r24, 0xF8	; 248
    13cc:	8c 93       	st	X, r24
    13ce:	0f c0       	rjmp	.+30     	; 0x13ee <MTIMERS_vStopTimer+0x62>
		break;
	case u16TIMER1 :
		TCCR1B = (TCCR0 & 0xF8) | (TIMER_DISABLE);
    13d0:	ae e4       	ldi	r26, 0x4E	; 78
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e3 e5       	ldi	r30, 0x53	; 83
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	88 7f       	andi	r24, 0xF8	; 248
    13dc:	8c 93       	st	X, r24
    13de:	07 c0       	rjmp	.+14     	; 0x13ee <MTIMERS_vStopTimer+0x62>
		break;
	case TIMER2 :
		TCCR2 = (TCCR2 & 0xF8) | (TIMER_DISABLE);
    13e0:	a5 e4       	ldi	r26, 0x45	; 69
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 e4       	ldi	r30, 0x45	; 69
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	88 7f       	andi	r24, 0xF8	; 248
    13ec:	8c 93       	st	X, r24
		break;
	}
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <__vector_11>:

/* Timer 0 Overflow ISR */
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	ef 93       	push	r30
    141a:	ff 93       	push	r31
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    1424:	80 91 68 00 	lds	r24, 0x0068
    1428:	90 91 69 00 	lds	r25, 0x0069
    142c:	a0 91 6a 00 	lds	r26, 0x006A
    1430:	b0 91 6b 00 	lds	r27, 0x006B
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	a1 1d       	adc	r26, r1
    1438:	b1 1d       	adc	r27, r1
    143a:	80 93 68 00 	sts	0x0068, r24
    143e:	90 93 69 00 	sts	0x0069, r25
    1442:	a0 93 6a 00 	sts	0x006A, r26
    1446:	b0 93 6b 00 	sts	0x006B, r27

	if(LS_u32Counter == G_u32IntervalCount)
    144a:	20 91 68 00 	lds	r18, 0x0068
    144e:	30 91 69 00 	lds	r19, 0x0069
    1452:	40 91 6a 00 	lds	r20, 0x006A
    1456:	50 91 6b 00 	lds	r21, 0x006B
    145a:	80 91 8a 00 	lds	r24, 0x008A
    145e:	90 91 8b 00 	lds	r25, 0x008B
    1462:	a0 91 8c 00 	lds	r26, 0x008C
    1466:	b0 91 8d 00 	lds	r27, 0x008D
    146a:	28 17       	cp	r18, r24
    146c:	39 07       	cpc	r19, r25
    146e:	4a 07       	cpc	r20, r26
    1470:	5b 07       	cpc	r21, r27
    1472:	99 f4       	brne	.+38     	; 0x149a <__vector_11+0xa0>
	{
		if(G_TIM0_OVF_Callback != NULL)
    1474:	80 91 78 00 	lds	r24, 0x0078
    1478:	90 91 79 00 	lds	r25, 0x0079
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	69 f0       	breq	.+26     	; 0x149a <__vector_11+0xa0>
		{
			G_TIM0_OVF_Callback();
    1480:	e0 91 78 00 	lds	r30, 0x0078
    1484:	f0 91 79 00 	lds	r31, 0x0079
    1488:	09 95       	icall
			LS_u32Counter = 0;
    148a:	10 92 68 00 	sts	0x0068, r1
    148e:	10 92 69 00 	sts	0x0069, r1
    1492:	10 92 6a 00 	sts	0x006A, r1
    1496:	10 92 6b 00 	sts	0x006B, r1
		}
	}
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	0f 90       	pop	r0
    14bc:	1f 90       	pop	r1
    14be:	18 95       	reti

000014c0 <__vector_10>:

/* Timer 0 CTC ISR */
void __vector_10(void) __attribute__((signal))  ;
void __vector_10(void)
{
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    14ea:	80 91 6c 00 	lds	r24, 0x006C
    14ee:	90 91 6d 00 	lds	r25, 0x006D
    14f2:	a0 91 6e 00 	lds	r26, 0x006E
    14f6:	b0 91 6f 00 	lds	r27, 0x006F
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	a1 1d       	adc	r26, r1
    14fe:	b1 1d       	adc	r27, r1
    1500:	80 93 6c 00 	sts	0x006C, r24
    1504:	90 93 6d 00 	sts	0x006D, r25
    1508:	a0 93 6e 00 	sts	0x006E, r26
    150c:	b0 93 6f 00 	sts	0x006F, r27

	if(LS_u32Counter == G_u32IntervalCount)
    1510:	20 91 6c 00 	lds	r18, 0x006C
    1514:	30 91 6d 00 	lds	r19, 0x006D
    1518:	40 91 6e 00 	lds	r20, 0x006E
    151c:	50 91 6f 00 	lds	r21, 0x006F
    1520:	80 91 8a 00 	lds	r24, 0x008A
    1524:	90 91 8b 00 	lds	r25, 0x008B
    1528:	a0 91 8c 00 	lds	r26, 0x008C
    152c:	b0 91 8d 00 	lds	r27, 0x008D
    1530:	28 17       	cp	r18, r24
    1532:	39 07       	cpc	r19, r25
    1534:	4a 07       	cpc	r20, r26
    1536:	5b 07       	cpc	r21, r27
    1538:	99 f4       	brne	.+38     	; 0x1560 <__vector_10+0xa0>
	{
		if(G_TIM0_CTC_Callback != NULL)
    153a:	80 91 7a 00 	lds	r24, 0x007A
    153e:	90 91 7b 00 	lds	r25, 0x007B
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	69 f0       	breq	.+26     	; 0x1560 <__vector_10+0xa0>
		{
			G_TIM0_CTC_Callback();
    1546:	e0 91 7a 00 	lds	r30, 0x007A
    154a:	f0 91 7b 00 	lds	r31, 0x007B
    154e:	09 95       	icall
			LS_u32Counter = 0;
    1550:	10 92 6c 00 	sts	0x006C, r1
    1554:	10 92 6d 00 	sts	0x006D, r1
    1558:	10 92 6e 00 	sts	0x006E, r1
    155c:	10 92 6f 00 	sts	0x006F, r1
		}
	}
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_5>:


/* Timer 2 Overflow ISR */
void __vector_5(void)  __attribute__((signal));
void __vector_5(void)
{
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    15b0:	80 91 70 00 	lds	r24, 0x0070
    15b4:	90 91 71 00 	lds	r25, 0x0071
    15b8:	a0 91 72 00 	lds	r26, 0x0072
    15bc:	b0 91 73 00 	lds	r27, 0x0073
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	a1 1d       	adc	r26, r1
    15c4:	b1 1d       	adc	r27, r1
    15c6:	80 93 70 00 	sts	0x0070, r24
    15ca:	90 93 71 00 	sts	0x0071, r25
    15ce:	a0 93 72 00 	sts	0x0072, r26
    15d2:	b0 93 73 00 	sts	0x0073, r27

	if(LS_u32Counter == G_u32IntervalCount2)
    15d6:	20 91 70 00 	lds	r18, 0x0070
    15da:	30 91 71 00 	lds	r19, 0x0071
    15de:	40 91 72 00 	lds	r20, 0x0072
    15e2:	50 91 73 00 	lds	r21, 0x0073
    15e6:	80 91 86 00 	lds	r24, 0x0086
    15ea:	90 91 87 00 	lds	r25, 0x0087
    15ee:	a0 91 88 00 	lds	r26, 0x0088
    15f2:	b0 91 89 00 	lds	r27, 0x0089
    15f6:	28 17       	cp	r18, r24
    15f8:	39 07       	cpc	r19, r25
    15fa:	4a 07       	cpc	r20, r26
    15fc:	5b 07       	cpc	r21, r27
    15fe:	99 f4       	brne	.+38     	; 0x1626 <__vector_5+0xa0>
	{
		if(G_TIM2_OVF_Callback != NULL)
    1600:	80 91 7c 00 	lds	r24, 0x007C
    1604:	90 91 7d 00 	lds	r25, 0x007D
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	69 f0       	breq	.+26     	; 0x1626 <__vector_5+0xa0>
		{
			G_TIM2_OVF_Callback();
    160c:	e0 91 7c 00 	lds	r30, 0x007C
    1610:	f0 91 7d 00 	lds	r31, 0x007D
    1614:	09 95       	icall
			LS_u32Counter = 0;
    1616:	10 92 70 00 	sts	0x0070, r1
    161a:	10 92 71 00 	sts	0x0071, r1
    161e:	10 92 72 00 	sts	0x0072, r1
    1622:	10 92 73 00 	sts	0x0073, r1
		}
	}
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	bf 91       	pop	r27
    1630:	af 91       	pop	r26
    1632:	9f 91       	pop	r25
    1634:	8f 91       	pop	r24
    1636:	7f 91       	pop	r23
    1638:	6f 91       	pop	r22
    163a:	5f 91       	pop	r21
    163c:	4f 91       	pop	r20
    163e:	3f 91       	pop	r19
    1640:	2f 91       	pop	r18
    1642:	0f 90       	pop	r0
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	0f 90       	pop	r0
    1648:	1f 90       	pop	r1
    164a:	18 95       	reti

0000164c <__vector_4>:

/* Timer 2 CTC ISR */
void __vector_4(void) __attribute__((signal))  ;
void __vector_4(void)
{
    164c:	1f 92       	push	r1
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    1676:	80 91 74 00 	lds	r24, 0x0074
    167a:	90 91 75 00 	lds	r25, 0x0075
    167e:	a0 91 76 00 	lds	r26, 0x0076
    1682:	b0 91 77 00 	lds	r27, 0x0077
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	a1 1d       	adc	r26, r1
    168a:	b1 1d       	adc	r27, r1
    168c:	80 93 74 00 	sts	0x0074, r24
    1690:	90 93 75 00 	sts	0x0075, r25
    1694:	a0 93 76 00 	sts	0x0076, r26
    1698:	b0 93 77 00 	sts	0x0077, r27

	if(LS_u32Counter == G_u32IntervalCount2)
    169c:	20 91 74 00 	lds	r18, 0x0074
    16a0:	30 91 75 00 	lds	r19, 0x0075
    16a4:	40 91 76 00 	lds	r20, 0x0076
    16a8:	50 91 77 00 	lds	r21, 0x0077
    16ac:	80 91 86 00 	lds	r24, 0x0086
    16b0:	90 91 87 00 	lds	r25, 0x0087
    16b4:	a0 91 88 00 	lds	r26, 0x0088
    16b8:	b0 91 89 00 	lds	r27, 0x0089
    16bc:	28 17       	cp	r18, r24
    16be:	39 07       	cpc	r19, r25
    16c0:	4a 07       	cpc	r20, r26
    16c2:	5b 07       	cpc	r21, r27
    16c4:	99 f4       	brne	.+38     	; 0x16ec <__vector_4+0xa0>
	{
		if(G_TIM2_CTC_Callback != NULL)
    16c6:	80 91 7e 00 	lds	r24, 0x007E
    16ca:	90 91 7f 00 	lds	r25, 0x007F
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	69 f0       	breq	.+26     	; 0x16ec <__vector_4+0xa0>
		{
			G_TIM2_CTC_Callback();
    16d2:	e0 91 7e 00 	lds	r30, 0x007E
    16d6:	f0 91 7f 00 	lds	r31, 0x007F
    16da:	09 95       	icall
			LS_u32Counter = 0;
    16dc:	10 92 74 00 	sts	0x0074, r1
    16e0:	10 92 75 00 	sts	0x0075, r1
    16e4:	10 92 76 00 	sts	0x0076, r1
    16e8:	10 92 77 00 	sts	0x0077, r1
		}
	}
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_6>:

/* u16Timer1  CTC ISR */
void __vector_6(void) __attribute__((signal))  ;
void __vector_6(void)
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	G_TIMu16_ICU_Callback();
    173c:	e0 91 84 00 	lds	r30, 0x0084
    1740:	f0 91 85 00 	lds	r31, 0x0085
    1744:	09 95       	icall
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <MGIE_vEnableGlobalInterrupt>:

#include "GIE_int.h"


void MGIE_vEnableGlobalInterrupt(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    1774:	af e5       	ldi	r26, 0x5F	; 95
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ef e5       	ldi	r30, 0x5F	; 95
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	80 68       	ori	r24, 0x80	; 128
    1780:	8c 93       	st	X, r24
}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <MGIE_vDisableGlobalInterrupt>:

void MGIE_vDisableGlobalInterrupt(void)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    1790:	af e5       	ldi	r26, 0x5F	; 95
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ef e5       	ldi	r30, 0x5F	; 95
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8f 77       	andi	r24, 0x7F	; 127
    179c:	8c 93       	st	X, r24
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <MEXTI_vEnableInterrupt>:
#include "EXTI-prv.h"
#include "EXTI-con.h"


void MEXTI_vEnableInterrupt(u8 A_u8ExtiLineNo)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <MEXTI_vEnableInterrupt+0x6>
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiLineNo)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3b 83       	std	Y+3, r19	; 0x03
    17ba:	2a 83       	std	Y+2, r18	; 0x02
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	b1 f0       	breq	.+44     	; 0x17f2 <MEXTI_vEnableInterrupt+0x4e>
    17c6:	2a 81       	ldd	r18, Y+2	; 0x02
    17c8:	3b 81       	ldd	r19, Y+3	; 0x03
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	f1 f0       	breq	.+60     	; 0x180c <MEXTI_vEnableInterrupt+0x68>
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	31 f5       	brne	.+76     	; 0x1824 <MEXTI_vEnableInterrupt+0x80>
	{
	case EXTI_INT0:
		SET_BIT(GICR,6);
    17d8:	ab e5       	ldi	r26, 0x5B	; 91
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	eb e5       	ldi	r30, 0x5B	; 91
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	80 64       	ori	r24, 0x40	; 64
    17e4:	8c 93       	st	X, r24
		MDIO_vSetPinDir(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <MDIO_vSetPinDir>
    17f0:	19 c0       	rjmp	.+50     	; 0x1824 <MEXTI_vEnableInterrupt+0x80>
		break;
	case EXTI_INT1:
		SET_BIT(GICR,7);
    17f2:	ab e5       	ldi	r26, 0x5B	; 91
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	eb e5       	ldi	r30, 0x5B	; 91
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	80 68       	ori	r24, 0x80	; 128
    17fe:	8c 93       	st	X, r24
		MDIO_vSetPinDir(DIO_PORTD,DIO_PIN3,DIO_INPUT);
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	63 e0       	ldi	r22, 0x03	; 3
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <MDIO_vSetPinDir>
    180a:	0c c0       	rjmp	.+24     	; 0x1824 <MEXTI_vEnableInterrupt+0x80>
		break;
	case EXTI_INT2:
		SET_BIT(GICR,5);
    180c:	ab e5       	ldi	r26, 0x5B	; 91
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	eb e5       	ldi	r30, 0x5B	; 91
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	80 62       	ori	r24, 0x20	; 32
    1818:	8c 93       	st	X, r24
		MDIO_vSetPinDir(DIO_PORTB,DIO_PIN2,DIO_INPUT);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	62 e0       	ldi	r22, 0x02	; 2
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <MDIO_vSetPinDir>
		break;

	}

}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <MEXTI_vDisableInterrupt>:
void MEXTI_vDisableInterrupt(u8 A_u8ExtiLineNo)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <MEXTI_vDisableInterrupt+0x6>
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiLineNo)
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3b 83       	std	Y+3, r19	; 0x03
    1846:	2a 83       	std	Y+2, r18	; 0x02
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	9b 81       	ldd	r25, Y+3	; 0x03
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 05       	cpc	r25, r1
    1850:	89 f0       	breq	.+34     	; 0x1874 <MEXTI_vDisableInterrupt+0x44>
    1852:	2a 81       	ldd	r18, Y+2	; 0x02
    1854:	3b 81       	ldd	r19, Y+3	; 0x03
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	a1 f0       	breq	.+40     	; 0x1884 <MEXTI_vDisableInterrupt+0x54>
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	b9 f4       	brne	.+46     	; 0x1892 <MEXTI_vDisableInterrupt+0x62>
	{
	case EXTI_INT0:
		CLR_BIT(GICR,6);
    1864:	ab e5       	ldi	r26, 0x5B	; 91
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	eb e5       	ldi	r30, 0x5B	; 91
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8f 7b       	andi	r24, 0xBF	; 191
    1870:	8c 93       	st	X, r24
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <MEXTI_vDisableInterrupt+0x62>
		break;
	case EXTI_INT1:
		CLR_BIT(GICR,7);
    1874:	ab e5       	ldi	r26, 0x5B	; 91
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	eb e5       	ldi	r30, 0x5B	; 91
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8f 77       	andi	r24, 0x7F	; 127
    1880:	8c 93       	st	X, r24
    1882:	07 c0       	rjmp	.+14     	; 0x1892 <MEXTI_vDisableInterrupt+0x62>
		break;
	case EXTI_INT2:
		CLR_BIT(GICR,5);
    1884:	ab e5       	ldi	r26, 0x5B	; 91
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	eb e5       	ldi	r30, 0x5B	; 91
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	8f 7d       	andi	r24, 0xDF	; 223
    1890:	8c 93       	st	X, r24
		break;

	}
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <MEXTI_vSetSenseControl>:
void MEXTI_vSetSenseControl(u8 A_u8ExtiLineNo, u8 A_u8SenseCtrl)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	2a 97       	sbiw	r28, 0x0a	; 10
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8ExtiLineNo)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3a 87       	std	Y+10, r19	; 0x0a
    18be:	29 87       	std	Y+9, r18	; 0x09
    18c0:	89 85       	ldd	r24, Y+9	; 0x09
    18c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	91 05       	cpc	r25, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <MEXTI_vSetSenseControl+0x2e>
    18ca:	66 c0       	rjmp	.+204    	; 0x1998 <MEXTI_vSetSenseControl+0xfa>
    18cc:	29 85       	ldd	r18, Y+9	; 0x09
    18ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <MEXTI_vSetSenseControl+0x3a>
    18d6:	bb c0       	rjmp	.+374    	; 0x1a4e <MEXTI_vSetSenseControl+0x1b0>
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	09 f0       	breq	.+2      	; 0x18e2 <MEXTI_vSetSenseControl+0x44>
    18e0:	da c0       	rjmp	.+436    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
	{
	case EXTI_INT0 :
		switch(A_u8SenseCtrl)
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	38 87       	std	Y+8, r19	; 0x08
    18ea:	2f 83       	std	Y+7, r18	; 0x07
    18ec:	8f 81       	ldd	r24, Y+7	; 0x07
    18ee:	98 85       	ldd	r25, Y+8	; 0x08
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	21 f1       	breq	.+72     	; 0x193e <MEXTI_vSetSenseControl+0xa0>
    18f6:	2f 81       	ldd	r18, Y+7	; 0x07
    18f8:	38 85       	ldd	r19, Y+8	; 0x08
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	2c f4       	brge	.+10     	; 0x190a <MEXTI_vSetSenseControl+0x6c>
    1900:	8f 81       	ldd	r24, Y+7	; 0x07
    1902:	98 85       	ldd	r25, Y+8	; 0x08
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	61 f0       	breq	.+24     	; 0x1920 <MEXTI_vSetSenseControl+0x82>
    1908:	c6 c0       	rjmp	.+396    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
    190a:	2f 81       	ldd	r18, Y+7	; 0x07
    190c:	38 85       	ldd	r19, Y+8	; 0x08
    190e:	22 30       	cpi	r18, 0x02	; 2
    1910:	31 05       	cpc	r19, r1
    1912:	21 f1       	breq	.+72     	; 0x195c <MEXTI_vSetSenseControl+0xbe>
    1914:	8f 81       	ldd	r24, Y+7	; 0x07
    1916:	98 85       	ldd	r25, Y+8	; 0x08
    1918:	83 30       	cpi	r24, 0x03	; 3
    191a:	91 05       	cpc	r25, r1
    191c:	71 f1       	breq	.+92     	; 0x197a <MEXTI_vSetSenseControl+0xdc>
    191e:	bb c0       	rjmp	.+374    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
		{
		case EXTI_FALLING_EDGE :
			CLR_BIT(MCUCR,0);
    1920:	a5 e5       	ldi	r26, 0x55	; 85
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e5       	ldi	r30, 0x55	; 85
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8e 7f       	andi	r24, 0xFE	; 254
    192c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    192e:	a5 e5       	ldi	r26, 0x55	; 85
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e5 e5       	ldi	r30, 0x55	; 85
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	82 60       	ori	r24, 0x02	; 2
    193a:	8c 93       	st	X, r24
    193c:	ac c0       	rjmp	.+344    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
			break;
		case EXTI_RISING_EDGE :
			SET_BIT(MCUCR,1);
    193e:	a5 e5       	ldi	r26, 0x55	; 85
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 e5       	ldi	r30, 0x55	; 85
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	82 60       	ori	r24, 0x02	; 2
    194a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    194c:	a5 e5       	ldi	r26, 0x55	; 85
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e5 e5       	ldi	r30, 0x55	; 85
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	81 60       	ori	r24, 0x01	; 1
    1958:	8c 93       	st	X, r24
    195a:	9d c0       	rjmp	.+314    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
			break;
		case EXTI_LOW :
			CLR_BIT(MCUCR,1);
    195c:	a5 e5       	ldi	r26, 0x55	; 85
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e5       	ldi	r30, 0x55	; 85
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8d 7f       	andi	r24, 0xFD	; 253
    1968:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    196a:	a5 e5       	ldi	r26, 0x55	; 85
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e5 e5       	ldi	r30, 0x55	; 85
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	8e 7f       	andi	r24, 0xFE	; 254
    1976:	8c 93       	st	X, r24
    1978:	8e c0       	rjmp	.+284    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
			break;
		case EXTI_ANY_CHANGE :
			CLR_BIT(MCUCR,1);
    197a:	a5 e5       	ldi	r26, 0x55	; 85
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e5 e5       	ldi	r30, 0x55	; 85
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8d 7f       	andi	r24, 0xFD	; 253
    1986:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1988:	a5 e5       	ldi	r26, 0x55	; 85
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e5 e5       	ldi	r30, 0x55	; 85
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	81 60       	ori	r24, 0x01	; 1
    1994:	8c 93       	st	X, r24
    1996:	7f c0       	rjmp	.+254    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
			break;
		}
		break;

	case EXTI_INT1 :
		switch(A_u8SenseCtrl)
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	3e 83       	std	Y+6, r19	; 0x06
    19a0:	2d 83       	std	Y+5, r18	; 0x05
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	91 05       	cpc	r25, r1
    19aa:	21 f1       	breq	.+72     	; 0x19f4 <MEXTI_vSetSenseControl+0x156>
    19ac:	2d 81       	ldd	r18, Y+5	; 0x05
    19ae:	3e 81       	ldd	r19, Y+6	; 0x06
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	31 05       	cpc	r19, r1
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <MEXTI_vSetSenseControl+0x122>
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	61 f0       	breq	.+24     	; 0x19d6 <MEXTI_vSetSenseControl+0x138>
    19be:	6b c0       	rjmp	.+214    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
    19c0:	2d 81       	ldd	r18, Y+5	; 0x05
    19c2:	3e 81       	ldd	r19, Y+6	; 0x06
    19c4:	22 30       	cpi	r18, 0x02	; 2
    19c6:	31 05       	cpc	r19, r1
    19c8:	21 f1       	breq	.+72     	; 0x1a12 <MEXTI_vSetSenseControl+0x174>
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	83 30       	cpi	r24, 0x03	; 3
    19d0:	91 05       	cpc	r25, r1
    19d2:	71 f1       	breq	.+92     	; 0x1a30 <MEXTI_vSetSenseControl+0x192>
    19d4:	60 c0       	rjmp	.+192    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
		{
		case EXTI_FALLING_EDGE :
				CLR_BIT(MCUCR,2);
    19d6:	a5 e5       	ldi	r26, 0x55	; 85
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e5 e5       	ldi	r30, 0x55	; 85
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8b 7f       	andi	r24, 0xFB	; 251
    19e2:	8c 93       	st	X, r24
				SET_BIT(MCUCR,3);
    19e4:	a5 e5       	ldi	r26, 0x55	; 85
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e5       	ldi	r30, 0x55	; 85
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	88 60       	ori	r24, 0x08	; 8
    19f0:	8c 93       	st	X, r24
    19f2:	51 c0       	rjmp	.+162    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
				break;
		case EXTI_RISING_EDGE :
				SET_BIT(MCUCR,2);
    19f4:	a5 e5       	ldi	r26, 0x55	; 85
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e5 e5       	ldi	r30, 0x55	; 85
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	84 60       	ori	r24, 0x04	; 4
    1a00:	8c 93       	st	X, r24
				SET_BIT(MCUCR,3);
    1a02:	a5 e5       	ldi	r26, 0x55	; 85
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e5 e5       	ldi	r30, 0x55	; 85
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	88 60       	ori	r24, 0x08	; 8
    1a0e:	8c 93       	st	X, r24
    1a10:	42 c0       	rjmp	.+132    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
				break;
		case EXTI_LOW :
				CLR_BIT(MCUCR,2);
    1a12:	a5 e5       	ldi	r26, 0x55	; 85
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e5 e5       	ldi	r30, 0x55	; 85
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8b 7f       	andi	r24, 0xFB	; 251
    1a1e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,3);
    1a20:	a5 e5       	ldi	r26, 0x55	; 85
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e5       	ldi	r30, 0x55	; 85
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	87 7f       	andi	r24, 0xF7	; 247
    1a2c:	8c 93       	st	X, r24
    1a2e:	33 c0       	rjmp	.+102    	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
				break;
		case EXTI_ANY_CHANGE :
				CLR_BIT(MCUCR,3);
    1a30:	a5 e5       	ldi	r26, 0x55	; 85
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e5 e5       	ldi	r30, 0x55	; 85
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	87 7f       	andi	r24, 0xF7	; 247
    1a3c:	8c 93       	st	X, r24
				SET_BIT(MCUCR,2);
    1a3e:	a5 e5       	ldi	r26, 0x55	; 85
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e5 e5       	ldi	r30, 0x55	; 85
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	84 60       	ori	r24, 0x04	; 4
    1a4a:	8c 93       	st	X, r24
    1a4c:	24 c0       	rjmp	.+72     	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
				break;
		}
		break;

	case EXTI_INT2:
		if((A_u8SenseCtrl==EXTI_RISING_EDGE)||(A_u8SenseCtrl==EXTI_FALLING_EDGE))
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <MEXTI_vSetSenseControl+0x1bc>
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	88 23       	and	r24, r24
    1a58:	f1 f4       	brne	.+60     	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
		{
		switch(A_u8SenseCtrl)
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3c 83       	std	Y+4, r19	; 0x04
    1a62:	2b 83       	std	Y+3, r18	; 0x03
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	31 f0       	breq	.+12     	; 0x1a78 <MEXTI_vSetSenseControl+0x1da>
    1a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a70:	21 30       	cpi	r18, 0x01	; 1
    1a72:	31 05       	cpc	r19, r1
    1a74:	49 f0       	breq	.+18     	; 0x1a88 <MEXTI_vSetSenseControl+0x1ea>
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
		{
		case EXTI_FALLING_EDGE:
					CLR_BIT(MCUCSR,6);
    1a78:	a4 e5       	ldi	r26, 0x54	; 84
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e4 e5       	ldi	r30, 0x54	; 84
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8f 7b       	andi	r24, 0xBF	; 191
    1a84:	8c 93       	st	X, r24
    1a86:	07 c0       	rjmp	.+14     	; 0x1a96 <MEXTI_vSetSenseControl+0x1f8>
					break;
		case EXTI_RISING_EDGE:
					SET_BIT(MCUCSR,6);
    1a88:	a4 e5       	ldi	r26, 0x54	; 84
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e4 e5       	ldi	r30, 0x54	; 84
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	80 64       	ori	r24, 0x40	; 64
    1a94:	8c 93       	st	X, r24
					break;
		}
		}
		break;
	}
}
    1a96:	2a 96       	adiw	r28, 0x0a	; 10
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <MDIO_vSetPinDir>:
#include "DIO-prv.h"



void MDIO_vSetPinDir(u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8Dir)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	27 97       	sbiw	r28, 0x07	; 7
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	6a 83       	std	Y+2, r22	; 0x02
    1ac0:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Dir == DIO_OUTPUT)
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <MDIO_vSetPinDir+0x22>
    1ac8:	6f c0       	rjmp	.+222    	; 0x1ba8 <MDIO_vSetPinDir+0x100>
	{
		switch(A_u8PortNo)
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	3f 83       	std	Y+7, r19	; 0x07
    1ad2:	2e 83       	std	Y+6, r18	; 0x06
    1ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	91 05       	cpc	r25, r1
    1adc:	49 f1       	breq	.+82     	; 0x1b30 <MDIO_vSetPinDir+0x88>
    1ade:	2e 81       	ldd	r18, Y+6	; 0x06
    1ae0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ae2:	22 30       	cpi	r18, 0x02	; 2
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <MDIO_vSetPinDir+0x4a>
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	9f 81       	ldd	r25, Y+7	; 0x07
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	61 f0       	breq	.+24     	; 0x1b08 <MDIO_vSetPinDir+0x60>
    1af0:	d2 c0       	rjmp	.+420    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
    1af2:	2e 81       	ldd	r18, Y+6	; 0x06
    1af4:	3f 81       	ldd	r19, Y+7	; 0x07
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	71 f1       	breq	.+92     	; 0x1b58 <MDIO_vSetPinDir+0xb0>
    1afc:	8e 81       	ldd	r24, Y+6	; 0x06
    1afe:	9f 81       	ldd	r25, Y+7	; 0x07
    1b00:	83 30       	cpi	r24, 0x03	; 3
    1b02:	91 05       	cpc	r25, r1
    1b04:	e9 f1       	breq	.+122    	; 0x1b80 <MDIO_vSetPinDir+0xd8>
    1b06:	c7 c0       	rjmp	.+398    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
		{
		case DIO_PORTA :
			SET_BIT(DDRA , A_u8PinNo );
    1b08:	aa e3       	ldi	r26, 0x3A	; 58
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ea e3       	ldi	r30, 0x3A	; 58
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <MDIO_vSetPinDir+0x7e>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <MDIO_vSetPinDir+0x7a>
    1b2a:	84 2b       	or	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	b3 c0       	rjmp	.+358    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTB :
			SET_BIT(DDRB , A_u8PinNo );
    1b30:	a7 e3       	ldi	r26, 0x37	; 55
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e7 e3       	ldi	r30, 0x37	; 55
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <MDIO_vSetPinDir+0xa6>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <MDIO_vSetPinDir+0xa2>
    1b52:	84 2b       	or	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	9f c0       	rjmp	.+318    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(DDRC , A_u8PinNo );
    1b58:	a4 e3       	ldi	r26, 0x34	; 52
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e4 e3       	ldi	r30, 0x34	; 52
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	48 2f       	mov	r20, r24
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 2e       	mov	r0, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <MDIO_vSetPinDir+0xce>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	0a 94       	dec	r0
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <MDIO_vSetPinDir+0xca>
    1b7a:	84 2b       	or	r24, r20
    1b7c:	8c 93       	st	X, r24
    1b7e:	8b c0       	rjmp	.+278    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTD :
			SET_BIT(DDRD , A_u8PinNo );
    1b80:	a1 e3       	ldi	r26, 0x31	; 49
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e1 e3       	ldi	r30, 0x31	; 49
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <MDIO_vSetPinDir+0xf6>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <MDIO_vSetPinDir+0xf2>
    1ba2:	84 2b       	or	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	77 c0       	rjmp	.+238    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
			break;
		}
	}
	else if(A_u8Dir == DIO_INPUT)
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	88 23       	and	r24, r24
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <MDIO_vSetPinDir+0x108>
    1bae:	73 c0       	rjmp	.+230    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
	{
		switch(A_u8PortNo)
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3d 83       	std	Y+5, r19	; 0x05
    1bb8:	2c 83       	std	Y+4, r18	; 0x04
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	59 f1       	breq	.+86     	; 0x1c1a <MDIO_vSetPinDir+0x172>
    1bc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <MDIO_vSetPinDir+0x130>
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	69 f0       	breq	.+26     	; 0x1bf0 <MDIO_vSetPinDir+0x148>
    1bd6:	5f c0       	rjmp	.+190    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
    1bd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bda:	3d 81       	ldd	r19, Y+5	; 0x05
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	89 f1       	breq	.+98     	; 0x1c44 <MDIO_vSetPinDir+0x19c>
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	91 05       	cpc	r25, r1
    1bea:	09 f4       	brne	.+2      	; 0x1bee <MDIO_vSetPinDir+0x146>
    1bec:	40 c0       	rjmp	.+128    	; 0x1c6e <MDIO_vSetPinDir+0x1c6>
    1bee:	53 c0       	rjmp	.+166    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
		{
		case DIO_PORTA :
			CLR_BIT(DDRA , A_u8PinNo );
    1bf0:	aa e3       	ldi	r26, 0x3A	; 58
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ea e3       	ldi	r30, 0x3A	; 58
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <MDIO_vSetPinDir+0x166>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <MDIO_vSetPinDir+0x162>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	3e c0       	rjmp	.+124    	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTB :
			CLR_BIT(DDRB , A_u8PinNo );
    1c1a:	a7 e3       	ldi	r26, 0x37	; 55
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e7 e3       	ldi	r30, 0x37	; 55
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <MDIO_vSetPinDir+0x190>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <MDIO_vSetPinDir+0x18c>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	29 c0       	rjmp	.+82     	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTC :
			CLR_BIT(DDRC , A_u8PinNo );
    1c44:	a4 e3       	ldi	r26, 0x34	; 52
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e4 e3       	ldi	r30, 0x34	; 52
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 2e       	mov	r0, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <MDIO_vSetPinDir+0x1ba>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	0a 94       	dec	r0
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <MDIO_vSetPinDir+0x1b6>
    1c66:	80 95       	com	r24
    1c68:	84 23       	and	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	14 c0       	rjmp	.+40     	; 0x1c96 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTD :
			CLR_BIT(DDRD , A_u8PinNo );
    1c6e:	a1 e3       	ldi	r26, 0x31	; 49
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e1 e3       	ldi	r30, 0x31	; 49
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <MDIO_vSetPinDir+0x1e4>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <MDIO_vSetPinDir+0x1e0>
    1c90:	80 95       	com	r24
    1c92:	84 23       	and	r24, r20
    1c94:	8c 93       	st	X, r24
			break;
		}
	}
}
    1c96:	27 96       	adiw	r28, 0x07	; 7
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <MDIO_vSetPinVal>:

void MDIO_vSetPinVal(u8 A_u8PortNo ,u8 A_u8PinNo , u8 A_u8Val)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	27 97       	sbiw	r28, 0x07	; 7
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	6a 83       	std	Y+2, r22	; 0x02
    1cc0:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Val == DIO_HIGH)
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <MDIO_vSetPinVal+0x22>
    1cc8:	6f c0       	rjmp	.+222    	; 0x1da8 <MDIO_vSetPinVal+0x100>
	{
		switch(A_u8PortNo)
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3f 83       	std	Y+7, r19	; 0x07
    1cd2:	2e 83       	std	Y+6, r18	; 0x06
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	49 f1       	breq	.+82     	; 0x1d30 <MDIO_vSetPinVal+0x88>
    1cde:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <MDIO_vSetPinVal+0x4a>
    1ce8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cea:	9f 81       	ldd	r25, Y+7	; 0x07
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <MDIO_vSetPinVal+0x60>
    1cf0:	d2 c0       	rjmp	.+420    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
    1cf2:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf4:	3f 81       	ldd	r19, Y+7	; 0x07
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	71 f1       	breq	.+92     	; 0x1d58 <MDIO_vSetPinVal+0xb0>
    1cfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	e9 f1       	breq	.+122    	; 0x1d80 <MDIO_vSetPinVal+0xd8>
    1d06:	c7 c0       	rjmp	.+398    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
		{
		case DIO_PORTA :
			SET_BIT(PORTA , A_u8PinNo );
    1d08:	ab e3       	ldi	r26, 0x3B	; 59
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	eb e3       	ldi	r30, 0x3B	; 59
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <MDIO_vSetPinVal+0x7e>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <MDIO_vSetPinVal+0x7a>
    1d2a:	84 2b       	or	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	b3 c0       	rjmp	.+358    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTB :
			SET_BIT(PORTB, A_u8PinNo );
    1d30:	a8 e3       	ldi	r26, 0x38	; 56
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <MDIO_vSetPinVal+0xa6>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <MDIO_vSetPinVal+0xa2>
    1d52:	84 2b       	or	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	9f c0       	rjmp	.+318    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(PORTC , A_u8PinNo );
    1d58:	a5 e3       	ldi	r26, 0x35	; 53
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e5 e3       	ldi	r30, 0x35	; 53
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <MDIO_vSetPinVal+0xce>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <MDIO_vSetPinVal+0xca>
    1d7a:	84 2b       	or	r24, r20
    1d7c:	8c 93       	st	X, r24
    1d7e:	8b c0       	rjmp	.+278    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTD :
			SET_BIT(PORTD , A_u8PinNo );
    1d80:	a2 e3       	ldi	r26, 0x32	; 50
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e2 e3       	ldi	r30, 0x32	; 50
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <MDIO_vSetPinVal+0xf6>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <MDIO_vSetPinVal+0xf2>
    1da2:	84 2b       	or	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	77 c0       	rjmp	.+238    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
			break;
		}
	}
	else if(A_u8Val == DIO_LOW)
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	88 23       	and	r24, r24
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <MDIO_vSetPinVal+0x108>
    1dae:	73 c0       	rjmp	.+230    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
	{
		switch(A_u8PortNo)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3d 83       	std	Y+5, r19	; 0x05
    1db8:	2c 83       	std	Y+4, r18	; 0x04
    1dba:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	59 f1       	breq	.+86     	; 0x1e1a <MDIO_vSetPinVal+0x172>
    1dc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc8:	22 30       	cpi	r18, 0x02	; 2
    1dca:	31 05       	cpc	r19, r1
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <MDIO_vSetPinVal+0x130>
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	69 f0       	breq	.+26     	; 0x1df0 <MDIO_vSetPinVal+0x148>
    1dd6:	5f c0       	rjmp	.+190    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
    1dd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dda:	3d 81       	ldd	r19, Y+5	; 0x05
    1ddc:	22 30       	cpi	r18, 0x02	; 2
    1dde:	31 05       	cpc	r19, r1
    1de0:	89 f1       	breq	.+98     	; 0x1e44 <MDIO_vSetPinVal+0x19c>
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	9d 81       	ldd	r25, Y+5	; 0x05
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	91 05       	cpc	r25, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <MDIO_vSetPinVal+0x146>
    1dec:	40 c0       	rjmp	.+128    	; 0x1e6e <MDIO_vSetPinVal+0x1c6>
    1dee:	53 c0       	rjmp	.+166    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
		{
		case DIO_PORTA :
			CLR_BIT(PORTA , A_u8PinNo );
    1df0:	ab e3       	ldi	r26, 0x3B	; 59
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	eb e3       	ldi	r30, 0x3B	; 59
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <MDIO_vSetPinVal+0x166>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <MDIO_vSetPinVal+0x162>
    1e12:	80 95       	com	r24
    1e14:	84 23       	and	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	3e c0       	rjmp	.+124    	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTB :
			CLR_BIT(PORTB , A_u8PinNo );
    1e1a:	a8 e3       	ldi	r26, 0x38	; 56
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e8 e3       	ldi	r30, 0x38	; 56
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <MDIO_vSetPinVal+0x190>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <MDIO_vSetPinVal+0x18c>
    1e3c:	80 95       	com	r24
    1e3e:	84 23       	and	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	29 c0       	rjmp	.+82     	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTC :
			CLR_BIT(PORTC , A_u8PinNo );
    1e44:	a5 e3       	ldi	r26, 0x35	; 53
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e5 e3       	ldi	r30, 0x35	; 53
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <MDIO_vSetPinVal+0x1ba>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <MDIO_vSetPinVal+0x1b6>
    1e66:	80 95       	com	r24
    1e68:	84 23       	and	r24, r20
    1e6a:	8c 93       	st	X, r24
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTD :
			CLR_BIT(PORTD , A_u8PinNo );
    1e6e:	a2 e3       	ldi	r26, 0x32	; 50
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e2 e3       	ldi	r30, 0x32	; 50
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	48 2f       	mov	r20, r24
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	02 2e       	mov	r0, r18
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <MDIO_vSetPinVal+0x1e4>
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	0a 94       	dec	r0
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <MDIO_vSetPinVal+0x1e0>
    1e90:	80 95       	com	r24
    1e92:	84 23       	and	r24, r20
    1e94:	8c 93       	st	X, r24
			break;
		}
	}

}
    1e96:	27 96       	adiw	r28, 0x07	; 7
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <MDIO_vTogPinVal>:

void MDIO_vTogPinVal(u8 A_u8PortNo ,u8 A_u8PinNo)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <MDIO_vTogPinVal+0x6>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <MDIO_vTogPinVal+0x8>
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	3c 83       	std	Y+4, r19	; 0x04
    1ec0:	2b 83       	std	Y+3, r18	; 0x03
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	81 30       	cpi	r24, 0x01	; 1
    1ec8:	91 05       	cpc	r25, r1
    1eca:	49 f1       	breq	.+82     	; 0x1f1e <MDIO_vTogPinVal+0x76>
    1ecc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ece:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed0:	22 30       	cpi	r18, 0x02	; 2
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <MDIO_vTogPinVal+0x38>
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	61 f0       	breq	.+24     	; 0x1ef6 <MDIO_vTogPinVal+0x4e>
    1ede:	5a c0       	rjmp	.+180    	; 0x1f94 <MDIO_vTogPinVal+0xec>
    1ee0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee4:	22 30       	cpi	r18, 0x02	; 2
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	71 f1       	breq	.+92     	; 0x1f46 <MDIO_vTogPinVal+0x9e>
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	83 30       	cpi	r24, 0x03	; 3
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	e9 f1       	breq	.+122    	; 0x1f6e <MDIO_vTogPinVal+0xc6>
    1ef4:	4f c0       	rjmp	.+158    	; 0x1f94 <MDIO_vTogPinVal+0xec>
	{
	case DIO_PORTA :
		TOG_BIT(PORTA , A_u8PinNo );
    1ef6:	ab e3       	ldi	r26, 0x3B	; 59
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	eb e3       	ldi	r30, 0x3B	; 59
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	48 2f       	mov	r20, r24
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <MDIO_vTogPinVal+0x6c>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <MDIO_vTogPinVal+0x68>
    1f18:	84 27       	eor	r24, r20
    1f1a:	8c 93       	st	X, r24
    1f1c:	3b c0       	rjmp	.+118    	; 0x1f94 <MDIO_vTogPinVal+0xec>
		break;
	case DIO_PORTB :
		TOG_BIT(PORTB, A_u8PinNo );
    1f1e:	a8 e3       	ldi	r26, 0x38	; 56
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e8 e3       	ldi	r30, 0x38	; 56
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	48 2f       	mov	r20, r24
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <MDIO_vTogPinVal+0x94>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <MDIO_vTogPinVal+0x90>
    1f40:	84 27       	eor	r24, r20
    1f42:	8c 93       	st	X, r24
    1f44:	27 c0       	rjmp	.+78     	; 0x1f94 <MDIO_vTogPinVal+0xec>
		break;
	case DIO_PORTC:
		TOG_BIT(PORTC , A_u8PinNo );
    1f46:	a5 e3       	ldi	r26, 0x35	; 53
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e5 e3       	ldi	r30, 0x35	; 53
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 2e       	mov	r0, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <MDIO_vTogPinVal+0xbc>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <MDIO_vTogPinVal+0xb8>
    1f68:	84 27       	eor	r24, r20
    1f6a:	8c 93       	st	X, r24
    1f6c:	13 c0       	rjmp	.+38     	; 0x1f94 <MDIO_vTogPinVal+0xec>
		break;
	case DIO_PORTD :
		TOG_BIT(PORTD , A_u8PinNo );
    1f6e:	a2 e3       	ldi	r26, 0x32	; 50
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e2 e3       	ldi	r30, 0x32	; 50
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	48 2f       	mov	r20, r24
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	02 2e       	mov	r0, r18
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <MDIO_vTogPinVal+0xe4>
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	0a 94       	dec	r0
    1f8e:	e2 f7       	brpl	.-8      	; 0x1f88 <MDIO_vTogPinVal+0xe0>
    1f90:	84 27       	eor	r24, r20
    1f92:	8c 93       	st	X, r24
		break;
	}
}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <MDIO_u8GetPinVal>:

u8 MDIO_u8GetPinVal(u8 A_u8PortNo , u8 A_u8PinNo)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <MDIO_u8GetPinVal+0x6>
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <MDIO_u8GetPinVal+0x8>
    1faa:	0f 92       	push	r0
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
    1fb2:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_PinVal = 0;
    1fb4:	19 82       	std	Y+1, r1	; 0x01

	switch(A_u8PortNo)
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	3d 83       	std	Y+5, r19	; 0x05
    1fbe:	2c 83       	std	Y+4, r18	; 0x04
    1fc0:	4c 81       	ldd	r20, Y+4	; 0x04
    1fc2:	5d 81       	ldd	r21, Y+5	; 0x05
    1fc4:	41 30       	cpi	r20, 0x01	; 1
    1fc6:	51 05       	cpc	r21, r1
    1fc8:	41 f1       	breq	.+80     	; 0x201a <MDIO_u8GetPinVal+0x78>
    1fca:	8c 81       	ldd	r24, Y+4	; 0x04
    1fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fce:	82 30       	cpi	r24, 0x02	; 2
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	34 f4       	brge	.+12     	; 0x1fe0 <MDIO_u8GetPinVal+0x3e>
    1fd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd8:	21 15       	cp	r18, r1
    1fda:	31 05       	cpc	r19, r1
    1fdc:	61 f0       	breq	.+24     	; 0x1ff6 <MDIO_u8GetPinVal+0x54>
    1fde:	52 c0       	rjmp	.+164    	; 0x2084 <MDIO_u8GetPinVal+0xe2>
    1fe0:	4c 81       	ldd	r20, Y+4	; 0x04
    1fe2:	5d 81       	ldd	r21, Y+5	; 0x05
    1fe4:	42 30       	cpi	r20, 0x02	; 2
    1fe6:	51 05       	cpc	r21, r1
    1fe8:	51 f1       	breq	.+84     	; 0x203e <MDIO_u8GetPinVal+0x9c>
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	83 30       	cpi	r24, 0x03	; 3
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	b9 f1       	breq	.+110    	; 0x2062 <MDIO_u8GetPinVal+0xc0>
    1ff4:	47 c0       	rjmp	.+142    	; 0x2084 <MDIO_u8GetPinVal+0xe2>
	{
	case DIO_PORTA :
		L_PinVal = GET_BIT(PINA , A_u8PinNo );
    1ff6:	e9 e3       	ldi	r30, 0x39	; 57
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	88 2f       	mov	r24, r24
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a9 01       	movw	r20, r18
    2008:	02 c0       	rjmp	.+4      	; 0x200e <MDIO_u8GetPinVal+0x6c>
    200a:	55 95       	asr	r21
    200c:	47 95       	ror	r20
    200e:	8a 95       	dec	r24
    2010:	e2 f7       	brpl	.-8      	; 0x200a <MDIO_u8GetPinVal+0x68>
    2012:	ca 01       	movw	r24, r20
    2014:	81 70       	andi	r24, 0x01	; 1
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	35 c0       	rjmp	.+106    	; 0x2084 <MDIO_u8GetPinVal+0xe2>
		break;
	case DIO_PORTB :
		L_PinVal = GET_BIT(PINB , A_u8PinNo );
    201a:	e6 e3       	ldi	r30, 0x36	; 54
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a9 01       	movw	r20, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <MDIO_u8GetPinVal+0x90>
    202e:	55 95       	asr	r21
    2030:	47 95       	ror	r20
    2032:	8a 95       	dec	r24
    2034:	e2 f7       	brpl	.-8      	; 0x202e <MDIO_u8GetPinVal+0x8c>
    2036:	ca 01       	movw	r24, r20
    2038:	81 70       	andi	r24, 0x01	; 1
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	23 c0       	rjmp	.+70     	; 0x2084 <MDIO_u8GetPinVal+0xe2>
		break;
	case DIO_PORTC :
		L_PinVal = GET_BIT(PINC , A_u8PinNo );
    203e:	e3 e3       	ldi	r30, 0x33	; 51
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a9 01       	movw	r20, r18
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <MDIO_u8GetPinVal+0xb4>
    2052:	55 95       	asr	r21
    2054:	47 95       	ror	r20
    2056:	8a 95       	dec	r24
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <MDIO_u8GetPinVal+0xb0>
    205a:	ca 01       	movw	r24, r20
    205c:	81 70       	andi	r24, 0x01	; 1
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	11 c0       	rjmp	.+34     	; 0x2084 <MDIO_u8GetPinVal+0xe2>
		break;
	case DIO_PORTD :
		L_PinVal = GET_BIT(PIND , A_u8PinNo );
    2062:	e0 e3       	ldi	r30, 0x30	; 48
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a9 01       	movw	r20, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <MDIO_u8GetPinVal+0xd8>
    2076:	55 95       	asr	r21
    2078:	47 95       	ror	r20
    207a:	8a 95       	dec	r24
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <MDIO_u8GetPinVal+0xd4>
    207e:	ca 01       	movw	r24, r20
    2080:	81 70       	andi	r24, 0x01	; 1
    2082:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return L_PinVal ;
    2084:	89 81       	ldd	r24, Y+1	; 0x01
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <MDIO_vSetPortDir>:

void MDIO_vSetPortDir(u8 A_u8PortNo , u8 A_u8Dir)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <MDIO_vSetPortDir+0x6>
    209c:	00 d0       	rcall	.+0      	; 0x209e <MDIO_vSetPortDir+0x8>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNo)
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	3c 83       	std	Y+4, r19	; 0x04
    20ae:	2b 83       	std	Y+3, r18	; 0x03
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	91 05       	cpc	r25, r1
    20b8:	d1 f0       	breq	.+52     	; 0x20ee <MDIO_vSetPortDir+0x58>
    20ba:	2b 81       	ldd	r18, Y+3	; 0x03
    20bc:	3c 81       	ldd	r19, Y+4	; 0x04
    20be:	22 30       	cpi	r18, 0x02	; 2
    20c0:	31 05       	cpc	r19, r1
    20c2:	2c f4       	brge	.+10     	; 0x20ce <MDIO_vSetPortDir+0x38>
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	9c 81       	ldd	r25, Y+4	; 0x04
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	61 f0       	breq	.+24     	; 0x20e4 <MDIO_vSetPortDir+0x4e>
    20cc:	1e c0       	rjmp	.+60     	; 0x210a <MDIO_vSetPortDir+0x74>
    20ce:	2b 81       	ldd	r18, Y+3	; 0x03
    20d0:	3c 81       	ldd	r19, Y+4	; 0x04
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	31 05       	cpc	r19, r1
    20d6:	81 f0       	breq	.+32     	; 0x20f8 <MDIO_vSetPortDir+0x62>
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	83 30       	cpi	r24, 0x03	; 3
    20de:	91 05       	cpc	r25, r1
    20e0:	81 f0       	breq	.+32     	; 0x2102 <MDIO_vSetPortDir+0x6c>
    20e2:	13 c0       	rjmp	.+38     	; 0x210a <MDIO_vSetPortDir+0x74>
	{
	case DIO_PORTA :
		DDRA =  A_u8Dir;
    20e4:	ea e3       	ldi	r30, 0x3A	; 58
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	80 83       	st	Z, r24
    20ec:	0e c0       	rjmp	.+28     	; 0x210a <MDIO_vSetPortDir+0x74>
		break;
	case DIO_PORTB :
		DDRB = A_u8Dir;
    20ee:	e7 e3       	ldi	r30, 0x37	; 55
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	80 83       	st	Z, r24
    20f6:	09 c0       	rjmp	.+18     	; 0x210a <MDIO_vSetPortDir+0x74>
		break;
	case DIO_PORTC:
		DDRC = A_u8Dir ;
    20f8:	e4 e3       	ldi	r30, 0x34	; 52
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	80 83       	st	Z, r24
    2100:	04 c0       	rjmp	.+8      	; 0x210a <MDIO_vSetPortDir+0x74>
		break;
	case DIO_PORTD :
		DDRD = A_u8Dir ;
    2102:	e1 e3       	ldi	r30, 0x31	; 49
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	80 83       	st	Z, r24
		break;
	}

}
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <MDIO_vSetPortVal>:
void MDIO_vSetPortVal(u8 A_u8PortNo , u8 A_u8val)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	00 d0       	rcall	.+0      	; 0x211e <MDIO_vSetPortVal+0x6>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <MDIO_vSetPortVal+0x8>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	3c 83       	std	Y+4, r19	; 0x04
    2130:	2b 83       	std	Y+3, r18	; 0x03
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	91 05       	cpc	r25, r1
    213a:	d1 f0       	breq	.+52     	; 0x2170 <MDIO_vSetPortVal+0x58>
    213c:	2b 81       	ldd	r18, Y+3	; 0x03
    213e:	3c 81       	ldd	r19, Y+4	; 0x04
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	31 05       	cpc	r19, r1
    2144:	2c f4       	brge	.+10     	; 0x2150 <MDIO_vSetPortVal+0x38>
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	61 f0       	breq	.+24     	; 0x2166 <MDIO_vSetPortVal+0x4e>
    214e:	1e c0       	rjmp	.+60     	; 0x218c <MDIO_vSetPortVal+0x74>
    2150:	2b 81       	ldd	r18, Y+3	; 0x03
    2152:	3c 81       	ldd	r19, Y+4	; 0x04
    2154:	22 30       	cpi	r18, 0x02	; 2
    2156:	31 05       	cpc	r19, r1
    2158:	81 f0       	breq	.+32     	; 0x217a <MDIO_vSetPortVal+0x62>
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	83 30       	cpi	r24, 0x03	; 3
    2160:	91 05       	cpc	r25, r1
    2162:	81 f0       	breq	.+32     	; 0x2184 <MDIO_vSetPortVal+0x6c>
    2164:	13 c0       	rjmp	.+38     	; 0x218c <MDIO_vSetPortVal+0x74>
	{
	case DIO_PORTA :
		PORTA=  A_u8val;
    2166:	eb e3       	ldi	r30, 0x3B	; 59
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	80 83       	st	Z, r24
    216e:	0e c0       	rjmp	.+28     	; 0x218c <MDIO_vSetPortVal+0x74>
		break;
	case DIO_PORTB :
		PORTB = A_u8val;
    2170:	e8 e3       	ldi	r30, 0x38	; 56
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	80 83       	st	Z, r24
    2178:	09 c0       	rjmp	.+18     	; 0x218c <MDIO_vSetPortVal+0x74>
		break;
	case DIO_PORTC:
		PORTC = A_u8val ;
    217a:	e5 e3       	ldi	r30, 0x35	; 53
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	80 83       	st	Z, r24
    2182:	04 c0       	rjmp	.+8      	; 0x218c <MDIO_vSetPortVal+0x74>
		break;
	case DIO_PORTD :
		PORTD = A_u8val ;
    2184:	e2 e3       	ldi	r30, 0x32	; 50
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	80 83       	st	Z, r24
		break;
	}

}
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <MDIO_u8GetPortVal>:

u8 MDIO_u8GetPortVal(u8 A_u8PortNo)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <MDIO_u8GetPortVal+0x6>
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <MDIO_u8GetPortVal+0x8>
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	8a 83       	std	Y+2, r24	; 0x02

	u8 L_PortVal = 0 ;
    21a8:	19 82       	std	Y+1, r1	; 0x01

	switch(A_u8PortNo)
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	3c 83       	std	Y+4, r19	; 0x04
    21b2:	2b 83       	std	Y+3, r18	; 0x03
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	81 30       	cpi	r24, 0x01	; 1
    21ba:	91 05       	cpc	r25, r1
    21bc:	d1 f0       	breq	.+52     	; 0x21f2 <MDIO_u8GetPortVal+0x58>
    21be:	2b 81       	ldd	r18, Y+3	; 0x03
    21c0:	3c 81       	ldd	r19, Y+4	; 0x04
    21c2:	22 30       	cpi	r18, 0x02	; 2
    21c4:	31 05       	cpc	r19, r1
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <MDIO_u8GetPortVal+0x38>
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	61 f0       	breq	.+24     	; 0x21e8 <MDIO_u8GetPortVal+0x4e>
    21d0:	1e c0       	rjmp	.+60     	; 0x220e <MDIO_u8GetPortVal+0x74>
    21d2:	2b 81       	ldd	r18, Y+3	; 0x03
    21d4:	3c 81       	ldd	r19, Y+4	; 0x04
    21d6:	22 30       	cpi	r18, 0x02	; 2
    21d8:	31 05       	cpc	r19, r1
    21da:	81 f0       	breq	.+32     	; 0x21fc <MDIO_u8GetPortVal+0x62>
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	83 30       	cpi	r24, 0x03	; 3
    21e2:	91 05       	cpc	r25, r1
    21e4:	81 f0       	breq	.+32     	; 0x2206 <MDIO_u8GetPortVal+0x6c>
    21e6:	13 c0       	rjmp	.+38     	; 0x220e <MDIO_u8GetPortVal+0x74>
	{
	case DIO_PORTA :
		L_PortVal = PORTA ;
    21e8:	eb e3       	ldi	r30, 0x3B	; 59
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	0e c0       	rjmp	.+28     	; 0x220e <MDIO_u8GetPortVal+0x74>
		break;
	case DIO_PORTB :
		L_PortVal = PORTB ;
    21f2:	e8 e3       	ldi	r30, 0x38	; 56
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	09 c0       	rjmp	.+18     	; 0x220e <MDIO_u8GetPortVal+0x74>
		break;
	case DIO_PORTC:
		L_PortVal = PORTC ;
    21fc:	e5 e3       	ldi	r30, 0x35	; 53
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	04 c0       	rjmp	.+8      	; 0x220e <MDIO_u8GetPortVal+0x74>
		break;
	case DIO_PORTD :
		L_PortVal = PORTD ;
    2206:	e2 e3       	ldi	r30, 0x32	; 50
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return L_PortVal ;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <MADC_vInit>:
void (*ADC_CallBack)(void);



void MADC_vInit(void)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
	/* 1- Reference voltage selection */
#if ADC_REF_VOLT==AVCC
	CLR_BIT(ADMUX, REFS1);
    2226:	a7 e2       	ldi	r26, 0x27	; 39
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e7 e2       	ldi	r30, 0x27	; 39
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8f 77       	andi	r24, 0x7F	; 127
    2232:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
    2234:	a7 e2       	ldi	r26, 0x27	; 39
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e7 e2       	ldi	r30, 0x27	; 39
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	80 64       	ori	r24, 0x40	; 64
    2240:	8c 93       	st	X, r24
#else
#error "Please select correct refence voltage"
#endif

	/* 2- Data Adjustment direction  */
	CLR_BIT(ADMUX, ADLAR);
    2242:	a7 e2       	ldi	r26, 0x27	; 39
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e7 e2       	ldi	r30, 0x27	; 39
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8f 7d       	andi	r24, 0xDF	; 223
    224e:	8c 93       	st	X, r24
	/* 3- Select Prescaler Bits    */
	ADCSRA = (ADCSRA & 0xF8) | (ADC_PRESCALER) ;
    2250:	a6 e2       	ldi	r26, 0x26	; 38
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e6 e2       	ldi	r30, 0x26	; 38
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	88 7f       	andi	r24, 0xF8	; 248
    225c:	83 60       	ori	r24, 0x03	; 3
    225e:	8c 93       	st	X, r24
	/* 4- Auto trigger Enable     */
	/*  4a- Select Auto trigger source  */
	CLR_BIT(ADCSRA, ADATE);
    2260:	a6 e2       	ldi	r26, 0x26	; 38
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e6 e2       	ldi	r30, 0x26	; 38
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	8f 7d       	andi	r24, 0xDF	; 223
    226c:	8c 93       	st	X, r24
	/* 5- Interrupt Enable/disable    */
#if ADC_INTERRUPT_ENABLE==DISABLE
	CLR_BIT(ADCSRA, ADIE);
#elif ADC_INTERRUPT_ENABLE==ENABLE
	SET_BIT(ADCSRA, ADIE);
    226e:	a6 e2       	ldi	r26, 0x26	; 38
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e6 e2       	ldi	r30, 0x26	; 38
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	88 60       	ori	r24, 0x08	; 8
    227a:	8c 93       	st	X, r24
#endif
	/* 6- Enable ADC peripheral   */
	SET_BIT(ADCSRA, ADEN);
    227c:	a6 e2       	ldi	r26, 0x26	; 38
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e6 e2       	ldi	r30, 0x26	; 38
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	80 68       	ori	r24, 0x80	; 128
    2288:	8c 93       	st	X, r24
}
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <MADC_u16AnalogRead>:

u16 MADC_u16AnalogRead(u8 A_u8ChannelNo)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	0f 92       	push	r0
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	89 83       	std	Y+1, r24	; 0x01

	/* 1- Select Channel   */
	ADMUX = (ADMUX & 0xE0) | (A_u8ChannelNo & 0x07) ;
    229c:	a7 e2       	ldi	r26, 0x27	; 39
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e7 e2       	ldi	r30, 0x27	; 39
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	98 2f       	mov	r25, r24
    22a8:	90 7e       	andi	r25, 0xE0	; 224
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	87 70       	andi	r24, 0x07	; 7
    22ae:	89 2b       	or	r24, r25
    22b0:	8c 93       	st	X, r24
	/* 2- Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    22b2:	a6 e2       	ldi	r26, 0x26	; 38
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e6 e2       	ldi	r30, 0x26	; 38
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 64       	ori	r24, 0x40	; 64
    22be:	8c 93       	st	X, r24
	/* 3- Poll on Flag     */
	while( GET_BIT(ADCSRA, ADIF) != 1 ){}
    22c0:	e6 e2       	ldi	r30, 0x26	; 38
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	82 95       	swap	r24
    22c8:	8f 70       	andi	r24, 0x0F	; 15
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	81 70       	andi	r24, 0x01	; 1
    22d0:	90 70       	andi	r25, 0x00	; 0
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	a9 f3       	breq	.-22     	; 0x22c0 <MADC_u16AnalogRead+0x30>
	/* 4- Clear Flag       */
	SET_BIT(ADCSRA, ADIF);
    22d6:	a6 e2       	ldi	r26, 0x26	; 38
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e6 e2       	ldi	r30, 0x26	; 38
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	80 61       	ori	r24, 0x10	; 16
    22e2:	8c 93       	st	X, r24
	/* 5- return ADC Data  */
	return ADC;
    22e4:	e4 e2       	ldi	r30, 0x24	; 36
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
}
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <MADC_vStartConversion>:


void MADC_vStartConversion(u8 A_u8ChannelNo)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	0f 92       	push	r0
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	89 83       	std	Y+1, r24	; 0x01
	/* 1- Select Channel   */
	ADMUX = (ADMUX & 0xE0) | (A_u8ChannelNo & 0x07) ;
    2300:	a7 e2       	ldi	r26, 0x27	; 39
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e7 e2       	ldi	r30, 0x27	; 39
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	98 2f       	mov	r25, r24
    230c:	90 7e       	andi	r25, 0xE0	; 224
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	87 70       	andi	r24, 0x07	; 7
    2312:	89 2b       	or	r24, r25
    2314:	8c 93       	st	X, r24
	/* 2- Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    2316:	a6 e2       	ldi	r26, 0x26	; 38
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e6 e2       	ldi	r30, 0x26	; 38
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	80 64       	ori	r24, 0x40	; 64
    2322:	8c 93       	st	X, r24
}
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <MADC_u16GetADCData>:


u16   MADC_u16GetADCData(void)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
	/* 5- return ADC Data  */
	return ADC;
    2334:	e4 e2       	ldi	r30, 0x24	; 36
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
}
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <MADC_vSetCallback>:

void MADC_vSetCallback( void (*A_Fptr)(void)  )
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	00 d0       	rcall	.+0      	; 0x2348 <MADC_vSetCallback+0x6>
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01


	ADC_CallBack = A_Fptr;
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	90 93 8f 00 	sts	0x008F, r25
    2358:	80 93 8e 00 	sts	0x008E, r24

}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <__vector_16>:

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
    2366:	1f 92       	push	r1
    2368:	0f 92       	push	r0
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	0f 92       	push	r0
    236e:	11 24       	eor	r1, r1
    2370:	2f 93       	push	r18
    2372:	3f 93       	push	r19
    2374:	4f 93       	push	r20
    2376:	5f 93       	push	r21
    2378:	6f 93       	push	r22
    237a:	7f 93       	push	r23
    237c:	8f 93       	push	r24
    237e:	9f 93       	push	r25
    2380:	af 93       	push	r26
    2382:	bf 93       	push	r27
    2384:	ef 93       	push	r30
    2386:	ff 93       	push	r31
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
	 ADC_CallBack();
    2390:	e0 91 8e 00 	lds	r30, 0x008E
    2394:	f0 91 8f 00 	lds	r31, 0x008F
    2398:	09 95       	icall
}
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	ff 91       	pop	r31
    23a0:	ef 91       	pop	r30
    23a2:	bf 91       	pop	r27
    23a4:	af 91       	pop	r26
    23a6:	9f 91       	pop	r25
    23a8:	8f 91       	pop	r24
    23aa:	7f 91       	pop	r23
    23ac:	6f 91       	pop	r22
    23ae:	5f 91       	pop	r21
    23b0:	4f 91       	pop	r20
    23b2:	3f 91       	pop	r19
    23b4:	2f 91       	pop	r18
    23b6:	0f 90       	pop	r0
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	0f 90       	pop	r0
    23bc:	1f 90       	pop	r1
    23be:	18 95       	reti

000023c0 <HLCD_vSendCommand>:
#include <util/delay.h>
#include"LCD_int.h"


void HLCD_vSendCommand(u8 A_u8Command)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	6d 97       	sbiw	r28, 0x1d	; 29
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	8d 8f       	std	Y+29, r24	; 0x1d

	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RS_PIN , DIO_LOW);
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RW_PIN , DIO_LOW);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(LCD_DATA_PORT,A_u8Command);
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23ee:	0e 94 8c 10 	call	0x2118	; 0x2118 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_EN_PIN,DIO_HIGH);
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	62 e0       	ldi	r22, 0x02	; 2
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinVal>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e8       	ldi	r26, 0x80	; 128
    2402:	bf e3       	ldi	r27, 0x3F	; 63
    2404:	89 8f       	std	Y+25, r24	; 0x19
    2406:	9a 8f       	std	Y+26, r25	; 0x1a
    2408:	ab 8f       	std	Y+27, r26	; 0x1b
    240a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	69 8d       	ldd	r22, Y+25	; 0x19
    240e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a ef       	ldi	r20, 0xFA	; 250
    241a:	54 e4       	ldi	r21, 0x44	; 68
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	8d 8b       	std	Y+21, r24	; 0x15
    2426:	9e 8b       	std	Y+22, r25	; 0x16
    2428:	af 8b       	std	Y+23, r26	; 0x17
    242a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    242c:	6d 89       	ldd	r22, Y+21	; 0x15
    242e:	7e 89       	ldd	r23, Y+22	; 0x16
    2430:	8f 89       	ldd	r24, Y+23	; 0x17
    2432:	98 8d       	ldd	r25, Y+24	; 0x18
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	2c f4       	brge	.+10     	; 0x244e <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9c 8b       	std	Y+20, r25	; 0x14
    244a:	8b 8b       	std	Y+19, r24	; 0x13
    244c:	3f c0       	rjmp	.+126    	; 0x24cc <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    244e:	6d 89       	ldd	r22, Y+21	; 0x15
    2450:	7e 89       	ldd	r23, Y+22	; 0x16
    2452:	8f 89       	ldd	r24, Y+23	; 0x17
    2454:	98 8d       	ldd	r25, Y+24	; 0x18
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	4c f5       	brge	.+82     	; 0x24b8 <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	69 8d       	ldd	r22, Y+25	; 0x19
    2468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    246a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    246c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9c 8b       	std	Y+20, r25	; 0x14
    248c:	8b 8b       	std	Y+19, r24	; 0x13
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <HLCD_vSendCommand+0xee>
    2490:	88 ec       	ldi	r24, 0xC8	; 200
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9a 8b       	std	Y+18, r25	; 0x12
    2496:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2498:	89 89       	ldd	r24, Y+17	; 0x11
    249a:	9a 89       	ldd	r25, Y+18	; 0x12
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <HLCD_vSendCommand+0xdc>
    24a0:	9a 8b       	std	Y+18, r25	; 0x12
    24a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	8b 89       	ldd	r24, Y+19	; 0x13
    24a6:	9c 89       	ldd	r25, Y+20	; 0x14
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9c 8b       	std	Y+20, r25	; 0x14
    24ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	8b 89       	ldd	r24, Y+19	; 0x13
    24b0:	9c 89       	ldd	r25, Y+20	; 0x14
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <HLCD_vSendCommand+0xd0>
    24b6:	14 c0       	rjmp	.+40     	; 0x24e0 <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ba:	7e 89       	ldd	r23, Y+22	; 0x16
    24bc:	8f 89       	ldd	r24, Y+23	; 0x17
    24be:	98 8d       	ldd	r25, Y+24	; 0x18
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	98 8b       	std	Y+16, r25	; 0x10
    24d2:	8f 87       	std	Y+15, r24	; 0x0f
    24d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d6:	98 89       	ldd	r25, Y+16	; 0x10
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <HLCD_vSendCommand+0x118>
    24dc:	98 8b       	std	Y+16, r25	; 0x10
    24de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_EN_PIN,DIO_LOW);
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	62 e0       	ldi	r22, 0x02	; 2
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinVal>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	a0 e8       	ldi	r26, 0x80	; 128
    24f0:	bf e3       	ldi	r27, 0x3F	; 63
    24f2:	8b 87       	std	Y+11, r24	; 0x0b
    24f4:	9c 87       	std	Y+12, r25	; 0x0c
    24f6:	ad 87       	std	Y+13, r26	; 0x0d
    24f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2500:	9e 85       	ldd	r25, Y+14	; 0x0e
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4a ef       	ldi	r20, 0xFA	; 250
    2508:	54 e4       	ldi	r21, 0x44	; 68
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	8f 83       	std	Y+7, r24	; 0x07
    2514:	98 87       	std	Y+8, r25	; 0x08
    2516:	a9 87       	std	Y+9, r26	; 0x09
    2518:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	2c f4       	brge	.+10     	; 0x253c <HLCD_vSendCommand+0x17c>
		__ticks = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	3f c0       	rjmp	.+126    	; 0x25ba <HLCD_vSendCommand+0x1fa>
	else if (__tmp > 65535)
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	4c f5       	brge	.+82     	; 0x25a6 <HLCD_vSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	6b 85       	ldd	r22, Y+11	; 0x0b
    2556:	7c 85       	ldd	r23, Y+12	; 0x0c
    2558:	8d 85       	ldd	r24, Y+13	; 0x0d
    255a:	9e 85       	ldd	r25, Y+14	; 0x0e
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e2       	ldi	r20, 0x20	; 32
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	0f c0       	rjmp	.+30     	; 0x259c <HLCD_vSendCommand+0x1dc>
    257e:	88 ec       	ldi	r24, 0xC8	; 200
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9c 83       	std	Y+4, r25	; 0x04
    2584:	8b 83       	std	Y+3, r24	; 0x03
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <HLCD_vSendCommand+0x1ca>
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	8d 81       	ldd	r24, Y+5	; 0x05
    2594:	9e 81       	ldd	r25, Y+6	; 0x06
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	69 f7       	brne	.-38     	; 0x257e <HLCD_vSendCommand+0x1be>
    25a4:	14 c0       	rjmp	.+40     	; 0x25ce <HLCD_vSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <HLCD_vSendCommand+0x206>
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    25ce:	6d 96       	adiw	r28, 0x1d	; 29
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <HLCD_vSendChar>:

void HLCD_vSendChar(u8 A_u8Char)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	6d 97       	sbiw	r28, 0x1d	; 29
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RS_PIN , DIO_HIGH);
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RW_PIN , DIO_LOW);
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(LCD_DATA_PORT,A_u8Char);
    260a:	82 e0       	ldi	r24, 0x02	; 2
    260c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    260e:	0e 94 8c 10 	call	0x2118	; 0x2118 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_EN_PIN,DIO_HIGH);
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	62 e0       	ldi	r22, 0x02	; 2
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinVal>
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	a0 e8       	ldi	r26, 0x80	; 128
    2622:	bf e3       	ldi	r27, 0x3F	; 63
    2624:	89 8f       	std	Y+25, r24	; 0x19
    2626:	9a 8f       	std	Y+26, r25	; 0x1a
    2628:	ab 8f       	std	Y+27, r26	; 0x1b
    262a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262c:	69 8d       	ldd	r22, Y+25	; 0x19
    262e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4a ef       	ldi	r20, 0xFA	; 250
    263a:	54 e4       	ldi	r21, 0x44	; 68
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	8d 8b       	std	Y+21, r24	; 0x15
    2646:	9e 8b       	std	Y+22, r25	; 0x16
    2648:	af 8b       	std	Y+23, r26	; 0x17
    264a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    264c:	6d 89       	ldd	r22, Y+21	; 0x15
    264e:	7e 89       	ldd	r23, Y+22	; 0x16
    2650:	8f 89       	ldd	r24, Y+23	; 0x17
    2652:	98 8d       	ldd	r25, Y+24	; 0x18
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2660:	88 23       	and	r24, r24
    2662:	2c f4       	brge	.+10     	; 0x266e <HLCD_vSendChar+0x8e>
		__ticks = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 8b       	std	Y+20, r25	; 0x14
    266a:	8b 8b       	std	Y+19, r24	; 0x13
    266c:	3f c0       	rjmp	.+126    	; 0x26ec <HLCD_vSendChar+0x10c>
	else if (__tmp > 65535)
    266e:	6d 89       	ldd	r22, Y+21	; 0x15
    2670:	7e 89       	ldd	r23, Y+22	; 0x16
    2672:	8f 89       	ldd	r24, Y+23	; 0x17
    2674:	98 8d       	ldd	r25, Y+24	; 0x18
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	3f ef       	ldi	r19, 0xFF	; 255
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	57 e4       	ldi	r21, 0x47	; 71
    267e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2682:	18 16       	cp	r1, r24
    2684:	4c f5       	brge	.+82     	; 0x26d8 <HLCD_vSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2686:	69 8d       	ldd	r22, Y+25	; 0x19
    2688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    268a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e2       	ldi	r20, 0x20	; 32
    2694:	51 e4       	ldi	r21, 0x41	; 65
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9c 8b       	std	Y+20, r25	; 0x14
    26ac:	8b 8b       	std	Y+19, r24	; 0x13
    26ae:	0f c0       	rjmp	.+30     	; 0x26ce <HLCD_vSendChar+0xee>
    26b0:	88 ec       	ldi	r24, 0xC8	; 200
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9a 8b       	std	Y+18, r25	; 0x12
    26b6:	89 8b       	std	Y+17, r24	; 0x11
    26b8:	89 89       	ldd	r24, Y+17	; 0x11
    26ba:	9a 89       	ldd	r25, Y+18	; 0x12
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <HLCD_vSendChar+0xdc>
    26c0:	9a 8b       	std	Y+18, r25	; 0x12
    26c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ce:	8b 89       	ldd	r24, Y+19	; 0x13
    26d0:	9c 89       	ldd	r25, Y+20	; 0x14
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	69 f7       	brne	.-38     	; 0x26b0 <HLCD_vSendChar+0xd0>
    26d6:	14 c0       	rjmp	.+40     	; 0x2700 <HLCD_vSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	9c 8b       	std	Y+20, r25	; 0x14
    26ea:	8b 8b       	std	Y+19, r24	; 0x13
    26ec:	8b 89       	ldd	r24, Y+19	; 0x13
    26ee:	9c 89       	ldd	r25, Y+20	; 0x14
    26f0:	98 8b       	std	Y+16, r25	; 0x10
    26f2:	8f 87       	std	Y+15, r24	; 0x0f
    26f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f6:	98 89       	ldd	r25, Y+16	; 0x10
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <HLCD_vSendChar+0x118>
    26fc:	98 8b       	std	Y+16, r25	; 0x10
    26fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_EN_PIN,DIO_LOW);
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	62 e0       	ldi	r22, 0x02	; 2
    2704:	40 e0       	ldi	r20, 0x00	; 0
    2706:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinVal>
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	a0 e8       	ldi	r26, 0x80	; 128
    2710:	bf e3       	ldi	r27, 0x3F	; 63
    2712:	8b 87       	std	Y+11, r24	; 0x0b
    2714:	9c 87       	std	Y+12, r25	; 0x0c
    2716:	ad 87       	std	Y+13, r26	; 0x0d
    2718:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271a:	6b 85       	ldd	r22, Y+11	; 0x0b
    271c:	7c 85       	ldd	r23, Y+12	; 0x0c
    271e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2720:	9e 85       	ldd	r25, Y+14	; 0x0e
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	4a ef       	ldi	r20, 0xFA	; 250
    2728:	54 e4       	ldi	r21, 0x44	; 68
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8f 83       	std	Y+7, r24	; 0x07
    2734:	98 87       	std	Y+8, r25	; 0x08
    2736:	a9 87       	std	Y+9, r26	; 0x09
    2738:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    273a:	6f 81       	ldd	r22, Y+7	; 0x07
    273c:	78 85       	ldd	r23, Y+8	; 0x08
    273e:	89 85       	ldd	r24, Y+9	; 0x09
    2740:	9a 85       	ldd	r25, Y+10	; 0x0a
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	2c f4       	brge	.+10     	; 0x275c <HLCD_vSendChar+0x17c>
		__ticks = 1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	8d 83       	std	Y+5, r24	; 0x05
    275a:	3f c0       	rjmp	.+126    	; 0x27da <HLCD_vSendChar+0x1fa>
	else if (__tmp > 65535)
    275c:	6f 81       	ldd	r22, Y+7	; 0x07
    275e:	78 85       	ldd	r23, Y+8	; 0x08
    2760:	89 85       	ldd	r24, Y+9	; 0x09
    2762:	9a 85       	ldd	r25, Y+10	; 0x0a
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	3f ef       	ldi	r19, 0xFF	; 255
    2768:	4f e7       	ldi	r20, 0x7F	; 127
    276a:	57 e4       	ldi	r21, 0x47	; 71
    276c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2770:	18 16       	cp	r1, r24
    2772:	4c f5       	brge	.+82     	; 0x27c6 <HLCD_vSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2774:	6b 85       	ldd	r22, Y+11	; 0x0b
    2776:	7c 85       	ldd	r23, Y+12	; 0x0c
    2778:	8d 85       	ldd	r24, Y+13	; 0x0d
    277a:	9e 85       	ldd	r25, Y+14	; 0x0e
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e2       	ldi	r20, 0x20	; 32
    2782:	51 e4       	ldi	r21, 0x41	; 65
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	9e 83       	std	Y+6, r25	; 0x06
    279a:	8d 83       	std	Y+5, r24	; 0x05
    279c:	0f c0       	rjmp	.+30     	; 0x27bc <HLCD_vSendChar+0x1dc>
    279e:	88 ec       	ldi	r24, 0xC8	; 200
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9c 83       	std	Y+4, r25	; 0x04
    27a4:	8b 83       	std	Y+3, r24	; 0x03
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <HLCD_vSendChar+0x1ca>
    27ae:	9c 83       	std	Y+4, r25	; 0x04
    27b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	9e 81       	ldd	r25, Y+6	; 0x06
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	69 f7       	brne	.-38     	; 0x279e <HLCD_vSendChar+0x1be>
    27c4:	14 c0       	rjmp	.+40     	; 0x27ee <HLCD_vSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c6:	6f 81       	ldd	r22, Y+7	; 0x07
    27c8:	78 85       	ldd	r23, Y+8	; 0x08
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	8d 81       	ldd	r24, Y+5	; 0x05
    27dc:	9e 81       	ldd	r25, Y+6	; 0x06
    27de:	9a 83       	std	Y+2, r25	; 0x02
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <HLCD_vSendChar+0x206>
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    27ee:	6d 96       	adiw	r28, 0x1d	; 29
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <HLCD_vInit>:


void HLCD_vInit(void)
{
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	c6 54       	subi	r28, 0x46	; 70
    280e:	d0 40       	sbci	r29, 0x00	; 0
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61

	MDIO_vSetPortDir(LCD_DATA_PORT,0xff);
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	6f ef       	ldi	r22, 0xFF	; 255
    281e:	0e 94 4b 10 	call	0x2096	; 0x2096 <MDIO_vSetPortDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	41 e0       	ldi	r20, 0x01	; 1
    2832:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT,LCD_EN_PIN,DIO_OUTPUT);
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	62 e0       	ldi	r22, 0x02	; 2
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <MDIO_vSetPinDir>
    2840:	fe 01       	movw	r30, r28
    2842:	ed 5b       	subi	r30, 0xBD	; 189
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a8 e4       	ldi	r26, 0x48	; 72
    284c:	b2 e4       	ldi	r27, 0x42	; 66
    284e:	80 83       	st	Z, r24
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	a2 83       	std	Z+2, r26	; 0x02
    2854:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	8e 01       	movw	r16, r28
    2858:	01 5c       	subi	r16, 0xC1	; 193
    285a:	1f 4f       	sbci	r17, 0xFF	; 255
    285c:	fe 01       	movw	r30, r28
    285e:	ed 5b       	subi	r30, 0xBD	; 189
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	f8 01       	movw	r30, r16
    287c:	80 83       	st	Z, r24
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	a2 83       	std	Z+2, r26	; 0x02
    2882:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2884:	fe 01       	movw	r30, r28
    2886:	ff 96       	adiw	r30, 0x3f	; 63
    2888:	60 81       	ld	r22, Z
    288a:	71 81       	ldd	r23, Z+1	; 0x01
    288c:	82 81       	ldd	r24, Z+2	; 0x02
    288e:	93 81       	ldd	r25, Z+3	; 0x03
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <HLCD_vInit+0xaa>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9e af       	std	Y+62, r25	; 0x3e
    28a6:	8d af       	std	Y+61, r24	; 0x3d
    28a8:	46 c0       	rjmp	.+140    	; 0x2936 <HLCD_vInit+0x136>
	else if (__tmp > 65535)
    28aa:	fe 01       	movw	r30, r28
    28ac:	ff 96       	adiw	r30, 0x3f	; 63
    28ae:	60 81       	ld	r22, Z
    28b0:	71 81       	ldd	r23, Z+1	; 0x01
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	3f ef       	ldi	r19, 0xFF	; 255
    28ba:	4f e7       	ldi	r20, 0x7F	; 127
    28bc:	57 e4       	ldi	r21, 0x47	; 71
    28be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c2:	18 16       	cp	r1, r24
    28c4:	64 f5       	brge	.+88     	; 0x291e <HLCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c6:	fe 01       	movw	r30, r28
    28c8:	ed 5b       	subi	r30, 0xBD	; 189
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e2       	ldi	r20, 0x20	; 32
    28da:	51 e4       	ldi	r21, 0x41	; 65
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	9e af       	std	Y+62, r25	; 0x3e
    28f2:	8d af       	std	Y+61, r24	; 0x3d
    28f4:	0f c0       	rjmp	.+30     	; 0x2914 <HLCD_vInit+0x114>
    28f6:	88 ec       	ldi	r24, 0xC8	; 200
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	9c af       	std	Y+60, r25	; 0x3c
    28fc:	8b af       	std	Y+59, r24	; 0x3b
    28fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    2900:	9c ad       	ldd	r25, Y+60	; 0x3c
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <HLCD_vInit+0x102>
    2906:	9c af       	std	Y+60, r25	; 0x3c
    2908:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290a:	8d ad       	ldd	r24, Y+61	; 0x3d
    290c:	9e ad       	ldd	r25, Y+62	; 0x3e
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	9e af       	std	Y+62, r25	; 0x3e
    2912:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2914:	8d ad       	ldd	r24, Y+61	; 0x3d
    2916:	9e ad       	ldd	r25, Y+62	; 0x3e
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	69 f7       	brne	.-38     	; 0x28f6 <HLCD_vInit+0xf6>
    291c:	16 c0       	rjmp	.+44     	; 0x294a <HLCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291e:	fe 01       	movw	r30, r28
    2920:	ff 96       	adiw	r30, 0x3f	; 63
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9e af       	std	Y+62, r25	; 0x3e
    2934:	8d af       	std	Y+61, r24	; 0x3d
    2936:	8d ad       	ldd	r24, Y+61	; 0x3d
    2938:	9e ad       	ldd	r25, Y+62	; 0x3e
    293a:	9a af       	std	Y+58, r25	; 0x3a
    293c:	89 af       	std	Y+57, r24	; 0x39
    293e:	89 ad       	ldd	r24, Y+57	; 0x39
    2940:	9a ad       	ldd	r25, Y+58	; 0x3a
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <HLCD_vInit+0x142>
    2946:	9a af       	std	Y+58, r25	; 0x3a
    2948:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(50);
	HLCD_vSendCommand(0b00111000);
    294a:	88 e3       	ldi	r24, 0x38	; 56
    294c:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a0 e8       	ldi	r26, 0x80	; 128
    2956:	bf e3       	ldi	r27, 0x3F	; 63
    2958:	8d ab       	std	Y+53, r24	; 0x35
    295a:	9e ab       	std	Y+54, r25	; 0x36
    295c:	af ab       	std	Y+55, r26	; 0x37
    295e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	6d a9       	ldd	r22, Y+53	; 0x35
    2962:	7e a9       	ldd	r23, Y+54	; 0x36
    2964:	8f a9       	ldd	r24, Y+55	; 0x37
    2966:	98 ad       	ldd	r25, Y+56	; 0x38
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a ef       	ldi	r20, 0xFA	; 250
    296e:	54 e4       	ldi	r21, 0x44	; 68
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	89 ab       	std	Y+49, r24	; 0x31
    297a:	9a ab       	std	Y+50, r25	; 0x32
    297c:	ab ab       	std	Y+51, r26	; 0x33
    297e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2980:	69 a9       	ldd	r22, Y+49	; 0x31
    2982:	7a a9       	ldd	r23, Y+50	; 0x32
    2984:	8b a9       	ldd	r24, Y+51	; 0x33
    2986:	9c a9       	ldd	r25, Y+52	; 0x34
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	5f e3       	ldi	r21, 0x3F	; 63
    2990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <HLCD_vInit+0x1a2>
		__ticks = 1;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	98 ab       	std	Y+48, r25	; 0x30
    299e:	8f a7       	std	Y+47, r24	; 0x2f
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <HLCD_vInit+0x220>
	else if (__tmp > 65535)
    29a2:	69 a9       	ldd	r22, Y+49	; 0x31
    29a4:	7a a9       	ldd	r23, Y+50	; 0x32
    29a6:	8b a9       	ldd	r24, Y+51	; 0x33
    29a8:	9c a9       	ldd	r25, Y+52	; 0x34
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	4c f5       	brge	.+82     	; 0x2a0c <HLCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	6d a9       	ldd	r22, Y+53	; 0x35
    29bc:	7e a9       	ldd	r23, Y+54	; 0x36
    29be:	8f a9       	ldd	r24, Y+55	; 0x37
    29c0:	98 ad       	ldd	r25, Y+56	; 0x38
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	98 ab       	std	Y+48, r25	; 0x30
    29e0:	8f a7       	std	Y+47, r24	; 0x2f
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <HLCD_vInit+0x202>
    29e4:	88 ec       	ldi	r24, 0xC8	; 200
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9e a7       	std	Y+46, r25	; 0x2e
    29ea:	8d a7       	std	Y+45, r24	; 0x2d
    29ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    29ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <HLCD_vInit+0x1f0>
    29f4:	9e a7       	std	Y+46, r25	; 0x2e
    29f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fa:	98 a9       	ldd	r25, Y+48	; 0x30
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	98 ab       	std	Y+48, r25	; 0x30
    2a00:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a04:	98 a9       	ldd	r25, Y+48	; 0x30
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <HLCD_vInit+0x1e4>
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <HLCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a0e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a10:	8b a9       	ldd	r24, Y+51	; 0x33
    2a12:	9c a9       	ldd	r25, Y+52	; 0x34
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	98 ab       	std	Y+48, r25	; 0x30
    2a1e:	8f a7       	std	Y+47, r24	; 0x2f
    2a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a22:	98 a9       	ldd	r25, Y+48	; 0x30
    2a24:	9c a7       	std	Y+44, r25	; 0x2c
    2a26:	8b a7       	std	Y+43, r24	; 0x2b
    2a28:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <HLCD_vInit+0x22c>
    2a30:	9c a7       	std	Y+44, r25	; 0x2c
    2a32:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HLCD_vSendCommand(0b00001100);
    2a34:	8c e0       	ldi	r24, 0x0C	; 12
    2a36:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a0 e8       	ldi	r26, 0x80	; 128
    2a40:	bf e3       	ldi	r27, 0x3F	; 63
    2a42:	8f a3       	std	Y+39, r24	; 0x27
    2a44:	98 a7       	std	Y+40, r25	; 0x28
    2a46:	a9 a7       	std	Y+41, r26	; 0x29
    2a48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4a ef       	ldi	r20, 0xFA	; 250
    2a58:	54 e4       	ldi	r21, 0x44	; 68
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8b a3       	std	Y+35, r24	; 0x23
    2a64:	9c a3       	std	Y+36, r25	; 0x24
    2a66:	ad a3       	std	Y+37, r26	; 0x25
    2a68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a70:	9e a1       	ldd	r25, Y+38	; 0x26
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <HLCD_vInit+0x28c>
		__ticks = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9a a3       	std	Y+34, r25	; 0x22
    2a88:	89 a3       	std	Y+33, r24	; 0x21
    2a8a:	3f c0       	rjmp	.+126    	; 0x2b0a <HLCD_vInit+0x30a>
	else if (__tmp > 65535)
    2a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a90:	8d a1       	ldd	r24, Y+37	; 0x25
    2a92:	9e a1       	ldd	r25, Y+38	; 0x26
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	4c f5       	brge	.+82     	; 0x2af6 <HLCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa6:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9a a3       	std	Y+34, r25	; 0x22
    2aca:	89 a3       	std	Y+33, r24	; 0x21
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <HLCD_vInit+0x2ec>
    2ace:	88 ec       	ldi	r24, 0xC8	; 200
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	98 a3       	std	Y+32, r25	; 0x20
    2ad4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad8:	98 a1       	ldd	r25, Y+32	; 0x20
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <HLCD_vInit+0x2da>
    2ade:	98 a3       	std	Y+32, r25	; 0x20
    2ae0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9a a3       	std	Y+34, r25	; 0x22
    2aea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	89 a1       	ldd	r24, Y+33	; 0x21
    2aee:	9a a1       	ldd	r25, Y+34	; 0x22
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	69 f7       	brne	.-38     	; 0x2ace <HLCD_vInit+0x2ce>
    2af4:	14 c0       	rjmp	.+40     	; 0x2b1e <HLCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af6:	6b a1       	ldd	r22, Y+35	; 0x23
    2af8:	7c a1       	ldd	r23, Y+36	; 0x24
    2afa:	8d a1       	ldd	r24, Y+37	; 0x25
    2afc:	9e a1       	ldd	r25, Y+38	; 0x26
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9a a3       	std	Y+34, r25	; 0x22
    2b08:	89 a3       	std	Y+33, r24	; 0x21
    2b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b10:	8d 8f       	std	Y+29, r24	; 0x1d
    2b12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <HLCD_vInit+0x316>
    2b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b1c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_vSendCommand(0b00000001);
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	a0 e4       	ldi	r26, 0x40	; 64
    2b2a:	b0 e4       	ldi	r27, 0x40	; 64
    2b2c:	89 8f       	std	Y+25, r24	; 0x19
    2b2e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b30:	ab 8f       	std	Y+27, r26	; 0x1b
    2b32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b34:	69 8d       	ldd	r22, Y+25	; 0x19
    2b36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4a ef       	ldi	r20, 0xFA	; 250
    2b42:	54 e4       	ldi	r21, 0x44	; 68
    2b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	8d 8b       	std	Y+21, r24	; 0x15
    2b4e:	9e 8b       	std	Y+22, r25	; 0x16
    2b50:	af 8b       	std	Y+23, r26	; 0x17
    2b52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b54:	6d 89       	ldd	r22, Y+21	; 0x15
    2b56:	7e 89       	ldd	r23, Y+22	; 0x16
    2b58:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e8       	ldi	r20, 0x80	; 128
    2b62:	5f e3       	ldi	r21, 0x3F	; 63
    2b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b68:	88 23       	and	r24, r24
    2b6a:	2c f4       	brge	.+10     	; 0x2b76 <HLCD_vInit+0x376>
		__ticks = 1;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9c 8b       	std	Y+20, r25	; 0x14
    2b72:	8b 8b       	std	Y+19, r24	; 0x13
    2b74:	3f c0       	rjmp	.+126    	; 0x2bf4 <HLCD_vInit+0x3f4>
	else if (__tmp > 65535)
    2b76:	6d 89       	ldd	r22, Y+21	; 0x15
    2b78:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	3f ef       	ldi	r19, 0xFF	; 255
    2b82:	4f e7       	ldi	r20, 0x7F	; 127
    2b84:	57 e4       	ldi	r21, 0x47	; 71
    2b86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8a:	18 16       	cp	r1, r24
    2b8c:	4c f5       	brge	.+82     	; 0x2be0 <HLCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e2       	ldi	r20, 0x20	; 32
    2b9c:	51 e4       	ldi	r21, 0x41	; 65
    2b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9c 8b       	std	Y+20, r25	; 0x14
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
    2bb6:	0f c0       	rjmp	.+30     	; 0x2bd6 <HLCD_vInit+0x3d6>
    2bb8:	88 ec       	ldi	r24, 0xC8	; 200
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	9a 8b       	std	Y+18, r25	; 0x12
    2bbe:	89 8b       	std	Y+17, r24	; 0x11
    2bc0:	89 89       	ldd	r24, Y+17	; 0x11
    2bc2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <HLCD_vInit+0x3c4>
    2bc8:	9a 8b       	std	Y+18, r25	; 0x12
    2bca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bce:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	9c 8b       	std	Y+20, r25	; 0x14
    2bd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	69 f7       	brne	.-38     	; 0x2bb8 <HLCD_vInit+0x3b8>
    2bde:	14 c0       	rjmp	.+40     	; 0x2c08 <HLCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be0:	6d 89       	ldd	r22, Y+21	; 0x15
    2be2:	7e 89       	ldd	r23, Y+22	; 0x16
    2be4:	8f 89       	ldd	r24, Y+23	; 0x17
    2be6:	98 8d       	ldd	r25, Y+24	; 0x18
    2be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	9c 8b       	std	Y+20, r25	; 0x14
    2bf2:	8b 8b       	std	Y+19, r24	; 0x13
    2bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf8:	98 8b       	std	Y+16, r25	; 0x10
    2bfa:	8f 87       	std	Y+15, r24	; 0x0f
    2bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfe:	98 89       	ldd	r25, Y+16	; 0x10
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <HLCD_vInit+0x400>
    2c04:	98 8b       	std	Y+16, r25	; 0x10
    2c06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	HLCD_vSendCommand(0b00000110);
    2c08:	86 e0       	ldi	r24, 0x06	; 6
    2c0a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	a0 e8       	ldi	r26, 0x80	; 128
    2c14:	bf e3       	ldi	r27, 0x3F	; 63
    2c16:	8b 87       	std	Y+11, r24	; 0x0b
    2c18:	9c 87       	std	Y+12, r25	; 0x0c
    2c1a:	ad 87       	std	Y+13, r26	; 0x0d
    2c1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4a ef       	ldi	r20, 0xFA	; 250
    2c2c:	54 e4       	ldi	r21, 0x44	; 68
    2c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	8f 83       	std	Y+7, r24	; 0x07
    2c38:	98 87       	std	Y+8, r25	; 0x08
    2c3a:	a9 87       	std	Y+9, r26	; 0x09
    2c3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c40:	78 85       	ldd	r23, Y+8	; 0x08
    2c42:	89 85       	ldd	r24, Y+9	; 0x09
    2c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e8       	ldi	r20, 0x80	; 128
    2c4c:	5f e3       	ldi	r21, 0x3F	; 63
    2c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c52:	88 23       	and	r24, r24
    2c54:	2c f4       	brge	.+10     	; 0x2c60 <HLCD_vInit+0x460>
		__ticks = 1;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	9e 83       	std	Y+6, r25	; 0x06
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
    2c5e:	3f c0       	rjmp	.+126    	; 0x2cde <HLCD_vInit+0x4de>
	else if (__tmp > 65535)
    2c60:	6f 81       	ldd	r22, Y+7	; 0x07
    2c62:	78 85       	ldd	r23, Y+8	; 0x08
    2c64:	89 85       	ldd	r24, Y+9	; 0x09
    2c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	3f ef       	ldi	r19, 0xFF	; 255
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	57 e4       	ldi	r21, 0x47	; 71
    2c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c74:	18 16       	cp	r1, r24
    2c76:	4c f5       	brge	.+82     	; 0x2cca <HLCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e2       	ldi	r20, 0x20	; 32
    2c86:	51 e4       	ldi	r21, 0x41	; 65
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9e 83       	std	Y+6, r25	; 0x06
    2c9e:	8d 83       	std	Y+5, r24	; 0x05
    2ca0:	0f c0       	rjmp	.+30     	; 0x2cc0 <HLCD_vInit+0x4c0>
    2ca2:	88 ec       	ldi	r24, 0xC8	; 200
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	9c 83       	std	Y+4, r25	; 0x04
    2ca8:	8b 83       	std	Y+3, r24	; 0x03
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	9c 81       	ldd	r25, Y+4	; 0x04
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <HLCD_vInit+0x4ae>
    2cb2:	9c 83       	std	Y+4, r25	; 0x04
    2cb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	9e 83       	std	Y+6, r25	; 0x06
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	69 f7       	brne	.-38     	; 0x2ca2 <HLCD_vInit+0x4a2>
    2cc8:	14 c0       	rjmp	.+40     	; 0x2cf2 <HLCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ccc:	78 85       	ldd	r23, Y+8	; 0x08
    2cce:	89 85       	ldd	r24, Y+9	; 0x09
    2cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9e 83       	std	Y+6, r25	; 0x06
    2cdc:	8d 83       	std	Y+5, r24	; 0x05
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce2:	9a 83       	std	Y+2, r25	; 0x02
    2ce4:	89 83       	std	Y+1, r24	; 0x01
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <HLCD_vInit+0x4ea>
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2cf2:	ca 5b       	subi	r28, 0xBA	; 186
    2cf4:	df 4f       	sbci	r29, 0xFF	; 255
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	08 95       	ret

00002d0a <HLCD_vPrintString>:


void HLCD_vPrintString(u8 A_s8String[])
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <HLCD_vPrintString+0x6>
    2d10:	0f 92       	push	r0
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	9b 83       	std	Y+3, r25	; 0x03
    2d18:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 L_u8I = 0 ; A_s8String[L_u8I] != '\0' ; L_u8I++)
    2d1a:	19 82       	std	Y+1, r1	; 0x01
    2d1c:	0e c0       	rjmp	.+28     	; 0x2d3a <HLCD_vPrintString+0x30>
	{
		HLCD_vSendChar(A_s8String[L_u8I]);
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	9b 81       	ldd	r25, Y+3	; 0x03
    2d28:	fc 01       	movw	r30, r24
    2d2a:	e2 0f       	add	r30, r18
    2d2c:	f3 1f       	adc	r31, r19
    2d2e:	80 81       	ld	r24, Z
    2d30:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HLCD_vSendChar>
}


void HLCD_vPrintString(u8 A_s8String[])
{
	for(u8 L_u8I = 0 ; A_s8String[L_u8I] != '\0' ; L_u8I++)
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	8f 5f       	subi	r24, 0xFF	; 255
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	9b 81       	ldd	r25, Y+3	; 0x03
    2d44:	fc 01       	movw	r30, r24
    2d46:	e2 0f       	add	r30, r18
    2d48:	f3 1f       	adc	r31, r19
    2d4a:	80 81       	ld	r24, Z
    2d4c:	88 23       	and	r24, r24
    2d4e:	39 f7       	brne	.-50     	; 0x2d1e <HLCD_vPrintString+0x14>
		HLCD_vSendChar(A_s8String[L_u8I]);

	}


}
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <HLCD_vPrintNumber>:


void HLCD_vPrintNumber(s32 A_s32Number)
{
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	60 97       	sbiw	r28, 0x10	; 16
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	6d 87       	std	Y+13, r22	; 0x0d
    2d76:	7e 87       	std	Y+14, r23	; 0x0e
    2d78:	8f 87       	std	Y+15, r24	; 0x0f
    2d7a:	98 8b       	std	Y+16, r25	; 0x10
	u8 L_u8Digits[10]={0};
    2d7c:	8a e0       	ldi	r24, 0x0A	; 10
    2d7e:	fe 01       	movw	r30, r28
    2d80:	33 96       	adiw	r30, 0x03	; 3
    2d82:	df 01       	movw	r26, r30
    2d84:	98 2f       	mov	r25, r24
    2d86:	1d 92       	st	X+, r1
    2d88:	9a 95       	dec	r25
    2d8a:	e9 f7       	brne	.-6      	; 0x2d86 <HLCD_vPrintNumber+0x2a>
	u8 L_u8counter = 0;
    2d8c:	1a 82       	std	Y+2, r1	; 0x02
    2d8e:	2d c0       	rjmp	.+90     	; 0x2dea <HLCD_vPrintNumber+0x8e>
	while(A_s32Number >0)
	{
		L_u8Digits[L_u8counter]=A_s32Number%10;
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	08 2f       	mov	r16, r24
    2d94:	10 e0       	ldi	r17, 0x00	; 0
    2d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9a:	af 85       	ldd	r26, Y+15	; 0x0f
    2d9c:	b8 89       	ldd	r27, Y+16	; 0x10
    2d9e:	2a e0       	ldi	r18, 0x0A	; 10
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e0       	ldi	r20, 0x00	; 0
    2da4:	50 e0       	ldi	r21, 0x00	; 0
    2da6:	bc 01       	movw	r22, r24
    2da8:	cd 01       	movw	r24, r26
    2daa:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__divmodsi4>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	28 2f       	mov	r18, r24
    2db4:	ce 01       	movw	r24, r28
    2db6:	03 96       	adiw	r24, 0x03	; 3
    2db8:	fc 01       	movw	r30, r24
    2dba:	e0 0f       	add	r30, r16
    2dbc:	f1 1f       	adc	r31, r17
    2dbe:	20 83       	st	Z, r18
		L_u8counter++;
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	8f 5f       	subi	r24, 0xFF	; 255
    2dc4:	8a 83       	std	Y+2, r24	; 0x02
		A_s32Number/=10 ;
    2dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dca:	af 85       	ldd	r26, Y+15	; 0x0f
    2dcc:	b8 89       	ldd	r27, Y+16	; 0x10
    2dce:	2a e0       	ldi	r18, 0x0A	; 10
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	50 e0       	ldi	r21, 0x00	; 0
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__divmodsi4>
    2dde:	da 01       	movw	r26, r20
    2de0:	c9 01       	movw	r24, r18
    2de2:	8d 87       	std	Y+13, r24	; 0x0d
    2de4:	9e 87       	std	Y+14, r25	; 0x0e
    2de6:	af 87       	std	Y+15, r26	; 0x0f
    2de8:	b8 8b       	std	Y+16, r27	; 0x10

void HLCD_vPrintNumber(s32 A_s32Number)
{
	u8 L_u8Digits[10]={0};
	u8 L_u8counter = 0;
	while(A_s32Number >0)
    2dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dee:	af 85       	ldd	r26, Y+15	; 0x0f
    2df0:	b8 89       	ldd	r27, Y+16	; 0x10
    2df2:	18 16       	cp	r1, r24
    2df4:	19 06       	cpc	r1, r25
    2df6:	1a 06       	cpc	r1, r26
    2df8:	1b 06       	cpc	r1, r27
    2dfa:	54 f2       	brlt	.-108    	; 0x2d90 <HLCD_vPrintNumber+0x34>
	{
		L_u8Digits[L_u8counter]=A_s32Number%10;
		L_u8counter++;
		A_s32Number/=10 ;
	}
	for(s8 L_s8loop=L_u8counter-1;L_s8loop>=0;L_s8loop--)
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	81 50       	subi	r24, 0x01	; 1
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	11 c0       	rjmp	.+34     	; 0x2e26 <HLCD_vPrintNumber+0xca>
		HLCD_vSendChar('0'+L_u8Digits[L_s8loop]);
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	28 2f       	mov	r18, r24
    2e08:	33 27       	eor	r19, r19
    2e0a:	27 fd       	sbrc	r18, 7
    2e0c:	30 95       	com	r19
    2e0e:	ce 01       	movw	r24, r28
    2e10:	03 96       	adiw	r24, 0x03	; 3
    2e12:	fc 01       	movw	r30, r24
    2e14:	e2 0f       	add	r30, r18
    2e16:	f3 1f       	adc	r31, r19
    2e18:	80 81       	ld	r24, Z
    2e1a:	80 5d       	subi	r24, 0xD0	; 208
    2e1c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HLCD_vSendChar>
	{
		L_u8Digits[L_u8counter]=A_s32Number%10;
		L_u8counter++;
		A_s32Number/=10 ;
	}
	for(s8 L_s8loop=L_u8counter-1;L_s8loop>=0;L_s8loop--)
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	81 50       	subi	r24, 0x01	; 1
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	88 23       	and	r24, r24
    2e2a:	64 f7       	brge	.-40     	; 0x2e04 <HLCD_vPrintNumber+0xa8>
		HLCD_vSendChar('0'+L_u8Digits[L_s8loop]);
}
    2e2c:	60 96       	adiw	r28, 0x10	; 16
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	08 95       	ret

00002e42 <HLCD_vGoToXY>:

void HLCD_vGoToXY(u8 A_u8Row , u8 A_u8Col)
{
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <HLCD_vGoToXY+0x6>
    2e48:	0f 92       	push	r0
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	8a 83       	std	Y+2, r24	; 0x02
    2e50:	6b 83       	std	Y+3, r22	; 0x03

	u8 L_u8DdramAdderss ;

	if( (A_u8Row < MAX_IDX_OF_ROW) && (A_u8Col < MAX_IDX_OF_COL) )
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	82 30       	cpi	r24, 0x02	; 2
    2e56:	90 f4       	brcc	.+36     	; 0x2e7c <HLCD_vGoToXY+0x3a>
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	80 31       	cpi	r24, 0x10	; 16
    2e5c:	78 f4       	brcc	.+30     	; 0x2e7c <HLCD_vGoToXY+0x3a>
	{
		if(A_u8Row == FIRST_ROW_IDX)
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	88 23       	and	r24, r24
    2e62:	19 f4       	brne	.+6      	; 0x2e6a <HLCD_vGoToXY+0x28>
		{
			L_u8DdramAdderss = FIRST_ROW_START + A_u8Col;
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	89 83       	std	Y+1, r24	; 0x01
    2e68:	03 c0       	rjmp	.+6      	; 0x2e70 <HLCD_vGoToXY+0x2e>
		}
		else
		{
			L_u8DdramAdderss = SEC_ROW_START + A_u8Col;
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	80 5c       	subi	r24, 0xC0	; 192
    2e6e:	89 83       	std	Y+1, r24	; 0x01
		}

		SET_BIT(L_u8DdramAdderss , 7);
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	80 68       	ori	r24, 0x80	; 128
    2e74:	89 83       	std	Y+1, r24	; 0x01
		HLCD_vSendCommand(L_u8DdramAdderss);
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>
	else
	{
		/*dont do eny thing*/
	}

}
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <HLCD_vSaveCustomChar>:




void HLCD_vSaveCustomChar(u8 A_u8PatternIdx , u8 A_PatternValue[])
{
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <HLCD_vSaveCustomChar+0x6>
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <HLCD_vSaveCustomChar+0x8>
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	8a 83       	std	Y+2, r24	; 0x02
    2e96:	7c 83       	std	Y+4, r23	; 0x04
    2e98:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8LoopIterator;
/*SET CURSOR POTHSION TO CGRAM*/
	HLCD_vSendCommand(0b01000000 + (A_u8PatternIdx*8) ) ;
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	88 2f       	mov	r24, r24
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	08 96       	adiw	r24, 0x08	; 8
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>

	/*SAVE CUSTEM CHAR*/
	for (L_u8LoopIterator = 0; L_u8LoopIterator < 8 ; L_u8LoopIterator++)
    2eb2:	19 82       	std	Y+1, r1	; 0x01
    2eb4:	0e c0       	rjmp	.+28     	; 0x2ed2 <HLCD_vSaveCustomChar+0x4a>
	{
		HLCD_vSendChar(A_PatternValue[L_u8LoopIterator]);
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	e2 0f       	add	r30, r18
    2ec4:	f3 1f       	adc	r31, r19
    2ec6:	80 81       	ld	r24, Z
    2ec8:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HLCD_vSendChar>
	u8 L_u8LoopIterator;
/*SET CURSOR POTHSION TO CGRAM*/
	HLCD_vSendCommand(0b01000000 + (A_u8PatternIdx*8) ) ;

	/*SAVE CUSTEM CHAR*/
	for (L_u8LoopIterator = 0; L_u8LoopIterator < 8 ; L_u8LoopIterator++)
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	8f 5f       	subi	r24, 0xFF	; 255
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	88 30       	cpi	r24, 0x08	; 8
    2ed6:	78 f3       	brcs	.-34     	; 0x2eb6 <HLCD_vSaveCustomChar+0x2e>
	{
		HLCD_vSendChar(A_PatternValue[L_u8LoopIterator]);
	}
	/*SET CURSOR POTHSION TO CGROM*/
	HLCD_vSendCommand(0x80);
    2ed8:	80 e8       	ldi	r24, 0x80	; 128
    2eda:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>

}
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <HLCD_vDisplayCustomChar>:


void HLCD_vDisplayCustomChar(u8 A_u8CgramIndex)
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	0f 92       	push	r0
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8CgramIndex < 8 )
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	88 30       	cpi	r24, 0x08	; 8
    2efc:	18 f4       	brcc	.+6      	; 0x2f04 <HLCD_vDisplayCustomChar+0x18>
	{
		HLCD_vSendChar(A_u8CgramIndex);
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HLCD_vSendChar>
	}
}
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <HLCD_vClearDisplay>:

void HLCD_vClearDisplay(void)
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62


	HLCD_vSendCommand(CLEAR_COMD);
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>
}
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	08 95       	ret

00002f20 <HLCD_vShiftPostion>:
void HLCD_vShiftPostion(u8 L_u8TypeOfShifting)
{
    2f20:	df 93       	push	r29
    2f22:	cf 93       	push	r28
    2f24:	0f 92       	push	r0
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	89 83       	std	Y+1, r24	; 0x01
	if(L_u8TypeOfShifting == SHIFT_LEFT)
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	80 31       	cpi	r24, 0x10	; 16
    2f30:	21 f4       	brne	.+8      	; 0x2f3a <HLCD_vShiftPostion+0x1a>
		HLCD_vSendCommand(SHIFT_LEFT);
    2f32:	80 e1       	ldi	r24, 0x10	; 16
    2f34:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>
    2f38:	06 c0       	rjmp	.+12     	; 0x2f46 <HLCD_vShiftPostion+0x26>
	else if(L_u8TypeOfShifting == SHIFT_RIGHT)
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	84 31       	cpi	r24, 0x14	; 20
    2f3e:	19 f4       	brne	.+6      	; 0x2f46 <HLCD_vShiftPostion+0x26>
		HLCD_vSendCommand(SHIFT_RIGHT);
    2f40:	84 e1       	ldi	r24, 0x14	; 20
    2f42:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <HLCD_vSendCommand>

}
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <main>:




int main(void)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
	MUART_vImit();
    2f56:	0e 94 a3 05 	call	0xb46	; 0xb46 <MUART_vImit>
	MUART_vTransmit('M');
    2f5a:	8d e4       	ldi	r24, 0x4D	; 77
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <MUART_vTransmit>
    2f62:	ff cf       	rjmp	.-2      	; 0x2f62 <main+0x14>

00002f64 <__divmodsi4>:
    2f64:	97 fb       	bst	r25, 7
    2f66:	09 2e       	mov	r0, r25
    2f68:	05 26       	eor	r0, r21
    2f6a:	0e d0       	rcall	.+28     	; 0x2f88 <__divmodsi4_neg1>
    2f6c:	57 fd       	sbrc	r21, 7
    2f6e:	04 d0       	rcall	.+8      	; 0x2f78 <__divmodsi4_neg2>
    2f70:	14 d0       	rcall	.+40     	; 0x2f9a <__udivmodsi4>
    2f72:	0a d0       	rcall	.+20     	; 0x2f88 <__divmodsi4_neg1>
    2f74:	00 1c       	adc	r0, r0
    2f76:	38 f4       	brcc	.+14     	; 0x2f86 <__divmodsi4_exit>

00002f78 <__divmodsi4_neg2>:
    2f78:	50 95       	com	r21
    2f7a:	40 95       	com	r20
    2f7c:	30 95       	com	r19
    2f7e:	21 95       	neg	r18
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	4f 4f       	sbci	r20, 0xFF	; 255
    2f84:	5f 4f       	sbci	r21, 0xFF	; 255

00002f86 <__divmodsi4_exit>:
    2f86:	08 95       	ret

00002f88 <__divmodsi4_neg1>:
    2f88:	f6 f7       	brtc	.-4      	; 0x2f86 <__divmodsi4_exit>
    2f8a:	90 95       	com	r25
    2f8c:	80 95       	com	r24
    2f8e:	70 95       	com	r23
    2f90:	61 95       	neg	r22
    2f92:	7f 4f       	sbci	r23, 0xFF	; 255
    2f94:	8f 4f       	sbci	r24, 0xFF	; 255
    2f96:	9f 4f       	sbci	r25, 0xFF	; 255
    2f98:	08 95       	ret

00002f9a <__udivmodsi4>:
    2f9a:	a1 e2       	ldi	r26, 0x21	; 33
    2f9c:	1a 2e       	mov	r1, r26
    2f9e:	aa 1b       	sub	r26, r26
    2fa0:	bb 1b       	sub	r27, r27
    2fa2:	fd 01       	movw	r30, r26
    2fa4:	0d c0       	rjmp	.+26     	; 0x2fc0 <__udivmodsi4_ep>

00002fa6 <__udivmodsi4_loop>:
    2fa6:	aa 1f       	adc	r26, r26
    2fa8:	bb 1f       	adc	r27, r27
    2faa:	ee 1f       	adc	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	a2 17       	cp	r26, r18
    2fb0:	b3 07       	cpc	r27, r19
    2fb2:	e4 07       	cpc	r30, r20
    2fb4:	f5 07       	cpc	r31, r21
    2fb6:	20 f0       	brcs	.+8      	; 0x2fc0 <__udivmodsi4_ep>
    2fb8:	a2 1b       	sub	r26, r18
    2fba:	b3 0b       	sbc	r27, r19
    2fbc:	e4 0b       	sbc	r30, r20
    2fbe:	f5 0b       	sbc	r31, r21

00002fc0 <__udivmodsi4_ep>:
    2fc0:	66 1f       	adc	r22, r22
    2fc2:	77 1f       	adc	r23, r23
    2fc4:	88 1f       	adc	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	1a 94       	dec	r1
    2fca:	69 f7       	brne	.-38     	; 0x2fa6 <__udivmodsi4_loop>
    2fcc:	60 95       	com	r22
    2fce:	70 95       	com	r23
    2fd0:	80 95       	com	r24
    2fd2:	90 95       	com	r25
    2fd4:	9b 01       	movw	r18, r22
    2fd6:	ac 01       	movw	r20, r24
    2fd8:	bd 01       	movw	r22, r26
    2fda:	cf 01       	movw	r24, r30
    2fdc:	08 95       	ret

00002fde <__prologue_saves__>:
    2fde:	2f 92       	push	r2
    2fe0:	3f 92       	push	r3
    2fe2:	4f 92       	push	r4
    2fe4:	5f 92       	push	r5
    2fe6:	6f 92       	push	r6
    2fe8:	7f 92       	push	r7
    2fea:	8f 92       	push	r8
    2fec:	9f 92       	push	r9
    2fee:	af 92       	push	r10
    2ff0:	bf 92       	push	r11
    2ff2:	cf 92       	push	r12
    2ff4:	df 92       	push	r13
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	ca 1b       	sub	r28, r26
    3008:	db 0b       	sbc	r29, r27
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	09 94       	ijmp

00003016 <__epilogue_restores__>:
    3016:	2a 88       	ldd	r2, Y+18	; 0x12
    3018:	39 88       	ldd	r3, Y+17	; 0x11
    301a:	48 88       	ldd	r4, Y+16	; 0x10
    301c:	5f 84       	ldd	r5, Y+15	; 0x0f
    301e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3020:	7d 84       	ldd	r7, Y+13	; 0x0d
    3022:	8c 84       	ldd	r8, Y+12	; 0x0c
    3024:	9b 84       	ldd	r9, Y+11	; 0x0b
    3026:	aa 84       	ldd	r10, Y+10	; 0x0a
    3028:	b9 84       	ldd	r11, Y+9	; 0x09
    302a:	c8 84       	ldd	r12, Y+8	; 0x08
    302c:	df 80       	ldd	r13, Y+7	; 0x07
    302e:	ee 80       	ldd	r14, Y+6	; 0x06
    3030:	fd 80       	ldd	r15, Y+5	; 0x05
    3032:	0c 81       	ldd	r16, Y+4	; 0x04
    3034:	1b 81       	ldd	r17, Y+3	; 0x03
    3036:	aa 81       	ldd	r26, Y+2	; 0x02
    3038:	b9 81       	ldd	r27, Y+1	; 0x01
    303a:	ce 0f       	add	r28, r30
    303c:	d1 1d       	adc	r29, r1
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	ed 01       	movw	r28, r26
    304a:	08 95       	ret

0000304c <_exit>:
    304c:	f8 94       	cli

0000304e <__stop_program>:
    304e:	ff cf       	rjmp	.-2      	; 0x304e <__stop_program>
